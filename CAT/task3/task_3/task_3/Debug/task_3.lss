
task_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  0000070e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000211  00000000  00000000  00000c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cb  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001107  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define PINB     *((volatile uint8_t *)0x36)

int main(void)
{
    /* Replace with your application code */
	DDRA |= 0x03;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8a bb       	out	0x1a, r24	; 26
	DDRB &= 0x07;
  72:	87 b3       	in	r24, 0x17	; 23
  74:	87 70       	andi	r24, 0x07	; 7
  76:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
		PORTA &=~(3<<0);
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	8c 7f       	andi	r24, 0xFC	; 252
  7c:	8b bb       	out	0x1b, r24	; 27
		if((PINB>>0)&1){
  7e:	b0 9b       	sbis	0x16, 0	; 22
  80:	09 c0       	rjmp	.+18     	; 0x94 <main+0x28>
			PORTA |=(1<<0);
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8b bb       	out	0x1b, r24	; 27
			PORTA &=~(1<<1);
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	8b bb       	out	0x1b, r24	; 27
			while((PINB>>0)&1);
  8e:	b0 99       	sbic	0x16, 0	; 22
  90:	fe cf       	rjmp	.-4      	; 0x8e <main+0x22>
  92:	f2 cf       	rjmp	.-28     	; 0x78 <main+0xc>
			
		}else if((PINB>>1)&1){
  94:	b1 9b       	sbis	0x16, 1	; 22
  96:	09 c0       	rjmp	.+18     	; 0xaa <main+0x3e>
			PORTA |=(1<<1);
  98:	8b b3       	in	r24, 0x1b	; 27
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8b bb       	out	0x1b, r24	; 27
			PORTA &=~(1<<0);
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	8b bb       	out	0x1b, r24	; 27
			while((PINB>>1)&1);
  a4:	b1 99       	sbic	0x16, 1	; 22
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x38>
  a8:	e7 cf       	rjmp	.-50     	; 0x78 <main+0xc>
			
		}else if((PINB>>2)&1){
  aa:	b2 9b       	sbis	0x16, 2	; 22
  ac:	e5 cf       	rjmp	.-54     	; 0x78 <main+0xc>
			PORTA |=(0b11<<0);
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	8b bb       	out	0x1b, r24	; 27
			while((PINB>>2)&1);
  b4:	b2 99       	sbic	0x16, 2	; 22
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x48>
  b8:	df cf       	rjmp	.-66     	; 0x78 <main+0xc>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
