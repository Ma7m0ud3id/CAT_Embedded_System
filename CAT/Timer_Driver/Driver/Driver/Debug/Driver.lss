
Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000722  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000722  000007b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080007a  0080007a  000007d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001649  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b87  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5a  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  00003918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000768  00000000  00000000  00003e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6b  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00005447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_1>
   8:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_2>
   c:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_3>
  10:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_4>
  14:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_10>
  2c:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  8a:	0c 94 8f 03 	jmp	0x71e	; 0x71e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	Dir_lcd_port=0xFF;
	lcd_control &= ~(1<<RW_switch);
	
}*/
void LCD_lcd_kick(){
	lcd_control |= (1 << E_switch);
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	84 60       	ori	r24, 0x04	; 4
  96:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_lcd_kick+0x10>
  a2:	00 00       	nop
	_delay_ms(50);
	lcd_control &= ~(1 << E_switch);
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	08 95       	ret

000000ac <LCD_check_lcd_isbusy>:
}

void LCD_check_lcd_isbusy(){
	Dir_lcd_port &= ~(0xFF<<Shift);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	1a ba       	out	0x1a, r1	; 26
	lcd_control |= (1 << RW_switch);
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~(1 << RS_switch);
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick();
  bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	Dir_lcd_port |= (0xFF<<Shift);
  c0:	8a b3       	in	r24, 0x1a	; 26
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a bb       	out	0x1a, r24	; 26
	lcd_control &= ~(1 << RW_switch);
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	08 95       	ret

000000ce <Send_command>:
	
}


void Send_command (unsigned char command){
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
	
	LCD_check_lcd_isbusy();
  d2:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
	lcd_control &= ~((1 << RS_switch) | (1<<RW_switch));
	_delay_ms(1);
	LCD_lcd_kick();
	#endif*/
	#ifdef FOUR_BIT_MODE
	LCD_check_lcd_isbusy();
  d6:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
	//lcd_port = (lcd_port & 0x0F) | (command & 0xF0);
	lcd_port = (lcd_port & 0x87) | ((command >>1) & 0x78);//phisical lcd
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	9c 2f       	mov	r25, r28
  de:	96 95       	lsr	r25
  e0:	98 77       	andi	r25, 0x78	; 120
  e2:	87 78       	andi	r24, 0x87	; 135
  e4:	89 2b       	or	r24, r25
  e6:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ ((1<<RW_switch)|(1<<RS_switch));
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8c 7f       	andi	r24, 0xFC	; 252
  ec:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick ();
  ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	//lcd_port = (lcd_port & 0x0F) | (command << 4);
	lcd_port = (lcd_port & 0x87 ) | ((command <<3) & 0x78);//phisical lcd
  f2:	2b b3       	in	r18, 0x1b	; 27
  f4:	8c 2f       	mov	r24, r28
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	92 2f       	mov	r25, r18
 106:	97 78       	andi	r25, 0x87	; 135
 108:	88 77       	andi	r24, 0x78	; 120
 10a:	89 2b       	or	r24, r25
 10c:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ ((1<<RW_switch)|(1<<RS_switch));
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick();
 114:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
    #endif
	
	
	
}
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <LCD_clear_screen>:
void LCD_clear_screen(){
	Send_command(LCD_CLEAR_SCREEN);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
 122:	08 95       	ret

00000124 <Lcd_init>:
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	93 e1       	ldi	r25, 0x13	; 19
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <Lcd_init+0x4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <Lcd_init+0xa>
 12e:	00 00       	nop
}
void Lcd_init (){
	_delay_ms(20);
	//Lcd_ispusy();
	Dir_lcd_control |= ((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
 130:	8a b3       	in	r24, 0x1a	; 26
 132:	87 60       	ori	r24, 0x07	; 7
 134:	8a bb       	out	0x1a, r24	; 26
	lcd_control &= ~((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	8b bb       	out	0x1b, r24	; 27
	Dir_lcd_port = 0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	85 ea       	ldi	r24, 0xA5	; 165
 142:	9e e0       	ldi	r25, 0x0E	; 14
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <Lcd_init+0x20>
 148:	00 c0       	rjmp	.+0      	; 0x14a <Lcd_init+0x26>
 14a:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 14c:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	   Send_command(LCD_FUNCTION_8BIT_2LINES);
	#endif
	#ifdef FOUR_BIT_MODE
	Send_command(0x02);
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
	Send_command(LCD_FUNCTION_4BIT_2LINES);
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
    #endif
	Send_command(LCD_ENTRY_MODE);
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
	Send_command(LCD_BEGIN_AT_FIRST_ROW);
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
	Send_command(LCD_DISP_ON);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
 16e:	08 95       	ret

00000170 <LCD_WRITE_CHAR>:
	Kick();
	#endif
	#ifdef FOUR_BIT_MODE
	#endif
}*/
void LCD_WRITE_CHAR(unsigned char character){
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	//lcd_port = (lcd_port & 0x0F) | (character & 0xF0);
	lcd_port = (lcd_port & 0x87) | ((character >>1) & 0x78);//phisical lcd
 174:	8b b3       	in	r24, 0x1b	; 27
 176:	9c 2f       	mov	r25, r28
 178:	96 95       	lsr	r25
 17a:	98 77       	andi	r25, 0x78	; 120
 17c:	87 78       	andi	r24, 0x87	; 135
 17e:	89 2b       	or	r24, r25
 180:	8b bb       	out	0x1b, r24	; 27
	lcd_control |= 1<<RS_switch; //turn RS ON for Data mode.
 182:	8b b3       	in	r24, 0x1b	; 27
 184:	82 60       	ori	r24, 0x02	; 2
 186:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ (1<<RW_switch);//turn RW off so you can write.
 188:	8b b3       	in	r24, 0x1b	; 27
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick();
 18e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	//lcd_port = (lcd_port & 0x0F) | (character << 4);
	lcd_port = (lcd_port & 0x87 ) | ((character << 3) & 0x78);//phisical lcd
 192:	2b b3       	in	r18, 0x1b	; 27
 194:	8c 2f       	mov	r24, r28
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	92 2f       	mov	r25, r18
 1a6:	97 78       	andi	r25, 0x87	; 135
 1a8:	88 77       	andi	r24, 0x78	; 120
 1aa:	89 2b       	or	r24, r25
 1ac:	8b bb       	out	0x1b, r24	; 27
	lcd_control |= 1<<RS_switch; //turn RS ON for Data mode.
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ (1<<RW_switch);//turn RW off so you can write.
 1b4:	8b b3       	in	r24, 0x1b	; 27
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	8b bb       	out	0x1b, r24	; 27
	LCD_lcd_kick ();
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
}
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <gotoXY>:
void gotoXY (unsigned char line,unsigned char posetion){
	if(line==2){
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	39 f4       	brne	.+14     	; 0x1d4 <gotoXY+0x12>
		if (posetion < 16 && posetion >= 0)
 1c6:	60 31       	cpi	r22, 0x10	; 16
 1c8:	68 f4       	brcc	.+26     	; 0x1e4 <gotoXY+0x22>
		{
			Send_command(LCD_BEGIN_AT_SECOND_ROW+posetion);
 1ca:	80 ec       	ldi	r24, 0xC0	; 192
 1cc:	86 0f       	add	r24, r22
 1ce:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
 1d2:	08 95       	ret
		}
		
	}else if(line==1){
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	31 f4       	brne	.+12     	; 0x1e4 <gotoXY+0x22>
		if (posetion < 16 && posetion >= 0)
 1d8:	60 31       	cpi	r22, 0x10	; 16
 1da:	20 f4       	brcc	.+8      	; 0x1e4 <gotoXY+0x22>
		{
			Send_command(LCD_BEGIN_AT_FIRST_ROW+posetion);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	86 0f       	add	r24, r22
 1e0:	0e 94 67 00 	call	0xce	; 0xce <Send_command>
 1e4:	08 95       	ret

000001e6 <Send_string>:
		}
	}
}
void Send_string (char* data){
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	8c 01       	movw	r16, r24
	int count=0;
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
	while (*data>0)
 1f4:	18 c0       	rjmp	.+48     	; 0x226 <Send_string+0x40>
	{
		
		LCD_WRITE_CHAR(*data++);
 1f6:	0f 5f       	subi	r16, 0xFF	; 255
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
 1fa:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_WRITE_CHAR>
		count++;
 1fe:	21 96       	adiw	r28, 0x01	; 1
		if (count==16)
 200:	c0 31       	cpi	r28, 0x10	; 16
 202:	d1 05       	cpc	r29, r1
 204:	29 f4       	brne	.+10     	; 0x210 <Send_string+0x2a>
		{
			gotoXY(2,0);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <gotoXY>
 20e:	0b c0       	rjmp	.+22     	; 0x226 <Send_string+0x40>
	     }else if (count==32)
 210:	c0 32       	cpi	r28, 0x20	; 32
 212:	d1 05       	cpc	r29, r1
 214:	41 f4       	brne	.+16     	; 0x226 <Send_string+0x40>
	    {
		   LCD_clear_screen();
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_clear_screen>
		   gotoXY(1,0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <gotoXY>
		   count = 0;
 222:	c0 e0       	ldi	r28, 0x00	; 0
 224:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}
void Send_string (char* data){
	int count=0;
	while (*data>0)
 226:	f8 01       	movw	r30, r16
 228:	80 81       	ld	r24, Z
 22a:	81 11       	cpse	r24, r1
 22c:	e4 cf       	rjmp	.-56     	; 0x1f6 <Send_string+0x10>
		   LCD_clear_screen();
		   gotoXY(1,0);
		   count = 0;
	    }
	}
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <main>:
#define F_CPU  16000000U
Timer_Configration timer_con;
int main(void)
{
	
	Lcd_init();
 238:	0e 94 92 00 	call	0x124	; 0x124 <Lcd_init>
	LCD_clear_screen();
 23c:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_clear_screen>
	Send_string("HELLO Mahmoud");
 240:	80 e6       	ldi	r24, 0x60	; 96
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Send_string>
 248:	2f e3       	ldi	r18, 0x3F	; 63
 24a:	8d e0       	ldi	r24, 0x0D	; 13
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	21 50       	subi	r18, 0x01	; 1
 250:	80 40       	sbci	r24, 0x00	; 0
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x16>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x20>
 258:	00 00       	nop
	_delay_ms(1000);
	LCD_clear_screen();
 25a:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_clear_screen>
	timer_con.timer_name=TIMER0;
 25e:	eb e7       	ldi	r30, 0x7B	; 123
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	10 82       	st	Z, r1
	timer_con.Clock_Select=Timer_0_prescaling_1024;
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	83 83       	std	Z+3, r24	; 0x03
	timer_con.Compare_Output_Mode=Timer_0_Clear_OC0;
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	82 83       	std	Z+2, r24	; 0x02
	timer_con.Asynchronous_Status=Timer_0_NON;
 26c:	15 82       	std	Z+5, r1	; 0x05
	timer_con.Intial_Timer=0;
 26e:	14 82       	std	Z+4, r1	; 0x04
	timer_con.Wave_Form=Timer_0_Fast_PWM;
 270:	88 e4       	ldi	r24, 0x48	; 72
 272:	81 83       	std	Z+1, r24	; 0x01
	timer_con.Timer_Call_Back_Compare=0;
 274:	17 82       	std	Z+7, r1	; 0x07
 276:	16 82       	std	Z+6, r1	; 0x06
	timer_con.Timer_Call_Back_overflow=0;
 278:	11 86       	std	Z+9, r1	; 0x09
 27a:	10 86       	std	Z+8, r1	; 0x08
	Timer_Init(&timer_con);
 27c:	cf 01       	movw	r24, r30
 27e:	0e 94 0c 02 	call	0x418	; 0x418 <Timer_Init>
	Timer_Set_Compare(TIMER0,200);
 282:	68 ec       	ldi	r22, 0xC8	; 200
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 de 02 	call	0x5bc	; 0x5bc <Timer_Set_Compare>
	Timer_0_Mask_Compere_overflow();
 28a:	89 b7       	in	r24, 0x39	; 57
 28c:	83 60       	ori	r24, 0x03	; 3
 28e:	89 bf       	out	0x39, r24	; 57
	DIR_PIN(DDRB,PIN3,OUTPUT);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	63 e0       	ldi	r22, 0x03	; 3
 294:	87 e3       	ldi	r24, 0x37	; 55
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 6d 01 	call	0x2da	; 0x2da <DIR_PIN>
	//****************************************
	Send_string("Timer Init");
 29c:	8e e6       	ldi	r24, 0x6E	; 110
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Send_string>
 2a4:	2f e3       	ldi	r18, 0x3F	; 63
 2a6:	8d e0       	ldi	r24, 0x0D	; 13
 2a8:	93 e0       	ldi	r25, 0x03	; 3
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x72>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x7c>
 2b4:	00 00       	nop
	_delay_ms(1000);
	LCD_clear_screen();
 2b6:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_clear_screen>
	//****************************************
	Send_string("HELLO Mahmoud");
 2ba:	80 e6       	ldi	r24, 0x60	; 96
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Send_string>
 2c2:	2f e3       	ldi	r18, 0x3F	; 63
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	93 e0       	ldi	r25, 0x03	; 3
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x90>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x9a>
 2d2:	00 00       	nop
	_delay_ms(1000);
	LCD_clear_screen();
 2d4:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_clear_screen>
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <main+0xa0>

000002da <DIR_PIN>:
	}
	
	
}
void DIR_PIN (uint8_t *DDRx,uint8_t pin,uint8_t state){
	if(OUTPUT==state){
 2da:	41 30       	cpi	r20, 0x01	; 1
 2dc:	61 f4       	brne	.+24     	; 0x2f6 <DIR_PIN+0x1c>
		*DDRx|=(1<<pin);
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIR_PIN+0xe>
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIR_PIN+0xa>
 2ec:	fc 01       	movw	r30, r24
 2ee:	30 81       	ld	r19, Z
 2f0:	23 2b       	or	r18, r19
 2f2:	20 83       	st	Z, r18
 2f4:	08 95       	ret
		}else if(INPUT==state){
 2f6:	41 11       	cpse	r20, r1
 2f8:	0c c0       	rjmp	.+24     	; 0x312 <DIR_PIN+0x38>
		*DDRx&=~(1<<pin);
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIR_PIN+0x2a>
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIR_PIN+0x26>
 308:	20 95       	com	r18
 30a:	fc 01       	movw	r30, r24
 30c:	30 81       	ld	r19, Z
 30e:	23 23       	and	r18, r19
 310:	20 83       	st	Z, r18
 312:	08 95       	ret

00000314 <__vector_1>:
	
	EXTI_config[index].EXTI_Function();
	
}*/
void  __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
	EXTI_config[(uint8_t)0].EXTI_Function();
 336:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <EXTI_config+0x2>
 33a:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <EXTI_config+0x3>
 33e:	09 95       	icall
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__vector_2>:

void  __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	EXTI_config[(uint8_t)1].EXTI_Function();
 384:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <EXTI_config+0x6>
 388:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <EXTI_config+0x7>
 38c:	09 95       	icall
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <__vector_3>:

void  __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
	EXTI_config[(uint8_t)2].EXTI_Function();
 3d2:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <EXTI_config+0xa>
 3d6:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <EXTI_config+0xb>
 3da:	09 95       	icall
}
 3dc:	ff 91       	pop	r31
 3de:	ef 91       	pop	r30
 3e0:	bf 91       	pop	r27
 3e2:	af 91       	pop	r26
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	7f 91       	pop	r23
 3ea:	6f 91       	pop	r22
 3ec:	5f 91       	pop	r21
 3ee:	4f 91       	pop	r20
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <Get_Timer_Index>:
void Timer_PWM(Timer_Configration *Timer_config,uint8_t value){
	
	
}

void Timer_Servo(Timer_Configration *Timer_config,uint8_t Phase){
 3fe:	88 23       	and	r24, r24
 400:	29 f0       	breq	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	29 f0       	breq	.+10     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	29 f4       	brne	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40a:	08 95       	ret
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret

00000418 <Timer_Init>:
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	ec 01       	movw	r28, r24
 41e:	88 81       	ld	r24, Y
 420:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Get_Timer_Index>
 424:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	d9 01       	movw	r26, r18
 42e:	aa 0f       	add	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	a9 01       	movw	r20, r18
 434:	44 0f       	add	r20, r20
 436:	55 1f       	adc	r21, r21
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	44 0f       	add	r20, r20
 43e:	55 1f       	adc	r21, r21
 440:	a4 0f       	add	r26, r20
 442:	b5 1f       	adc	r27, r21
 444:	af 56       	subi	r26, 0x6F	; 111
 446:	bf 4f       	sbci	r27, 0xFF	; 255
 448:	9a e0       	ldi	r25, 0x0A	; 10
 44a:	fe 01       	movw	r30, r28
 44c:	01 90       	ld	r0, Z+
 44e:	0d 92       	st	X+, r0
 450:	9a 95       	dec	r25
 452:	e1 f7       	brne	.-8      	; 0x44c <Timer_Init+0x34>
 454:	81 11       	cpse	r24, r1
 456:	48 c0       	rjmp	.+144    	; 0x4e8 <Timer_Init+0xd0>
 458:	93 b7       	in	r25, 0x33	; 51
 45a:	f9 01       	movw	r30, r18
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	e4 0f       	add	r30, r20
 462:	f5 1f       	adc	r31, r21
 464:	ef 56       	subi	r30, 0x6F	; 111
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	81 81       	ldd	r24, Z+1	; 0x01
 46a:	89 2b       	or	r24, r25
 46c:	83 bf       	out	0x33, r24	; 51
 46e:	23 b7       	in	r18, 0x33	; 51
 470:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	fc 01       	movw	r30, r24
 478:	ee 0f       	add	r30, r30
 47a:	ff 1f       	adc	r31, r31
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	e8 0f       	add	r30, r24
 48a:	f9 1f       	adc	r31, r25
 48c:	ef 56       	subi	r30, 0x6F	; 111
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	82 81       	ldd	r24, Z+2	; 0x02
 492:	82 2b       	or	r24, r18
 494:	83 bf       	out	0x33, r24	; 51
 496:	23 b7       	in	r18, 0x33	; 51
 498:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	fc 01       	movw	r30, r24
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	e8 0f       	add	r30, r24
 4b2:	f9 1f       	adc	r31, r25
 4b4:	ef 56       	subi	r30, 0x6F	; 111
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	83 81       	ldd	r24, Z+3	; 0x03
 4ba:	82 2b       	or	r24, r18
 4bc:	83 bf       	out	0x33, r24	; 51
 4be:	22 b7       	in	r18, 0x32	; 50
 4c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	e8 0f       	add	r30, r24
 4da:	f9 1f       	adc	r31, r25
 4dc:	ef 56       	subi	r30, 0x6F	; 111
 4de:	ff 4f       	sbci	r31, 0xFF	; 255
 4e0:	84 81       	ldd	r24, Z+4	; 0x04
 4e2:	82 2b       	or	r24, r18
 4e4:	82 bf       	out	0x32, r24	; 50
 4e6:	67 c0       	rjmp	.+206    	; 0x5b6 <Timer_Init+0x19e>
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	09 f4       	brne	.+2      	; 0x4ee <Timer_Init+0xd6>
 4ec:	64 c0       	rjmp	.+200    	; 0x5b6 <Timer_Init+0x19e>
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <Timer_Init+0xdc>
 4f2:	61 c0       	rjmp	.+194    	; 0x5b6 <Timer_Init+0x19e>
 4f4:	95 b5       	in	r25, 0x25	; 37
 4f6:	f9 01       	movw	r30, r18
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	e2 0f       	add	r30, r18
 50a:	f3 1f       	adc	r31, r19
 50c:	ef 56       	subi	r30, 0x6F	; 111
 50e:	ff 4f       	sbci	r31, 0xFF	; 255
 510:	81 81       	ldd	r24, Z+1	; 0x01
 512:	89 2b       	or	r24, r25
 514:	85 bd       	out	0x25, r24	; 37
 516:	25 b5       	in	r18, 0x25	; 37
 518:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	fc 01       	movw	r30, r24
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	e8 0f       	add	r30, r24
 532:	f9 1f       	adc	r31, r25
 534:	ef 56       	subi	r30, 0x6F	; 111
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	82 81       	ldd	r24, Z+2	; 0x02
 53a:	82 2b       	or	r24, r18
 53c:	85 bd       	out	0x25, r24	; 37
 53e:	25 b5       	in	r18, 0x25	; 37
 540:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	ef 56       	subi	r30, 0x6F	; 111
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
 560:	83 81       	ldd	r24, Z+3	; 0x03
 562:	82 2b       	or	r24, r18
 564:	85 bd       	out	0x25, r24	; 37
 566:	24 b5       	in	r18, 0x24	; 36
 568:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	e8 0f       	add	r30, r24
 582:	f9 1f       	adc	r31, r25
 584:	ef 56       	subi	r30, 0x6F	; 111
 586:	ff 4f       	sbci	r31, 0xFF	; 255
 588:	84 81       	ldd	r24, Z+4	; 0x04
 58a:	82 2b       	or	r24, r18
 58c:	84 bd       	out	0x24, r24	; 36
 58e:	22 b5       	in	r18, 0x22	; 34
 590:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	fc 01       	movw	r30, r24
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	e8 0f       	add	r30, r24
 5aa:	f9 1f       	adc	r31, r25
 5ac:	ef 56       	subi	r30, 0x6F	; 111
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
 5b0:	85 81       	ldd	r24, Z+5	; 0x05
 5b2:	82 2b       	or	r24, r18
 5b4:	82 bd       	out	0x22, r24	; 34
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <Timer_Set_Compare>:
 5bc:	cf 93       	push	r28
 5be:	c6 2f       	mov	r28, r22
 5c0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Get_Timer_Index>
 5c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 5c8:	81 11       	cpse	r24, r1
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <Timer_Set_Compare+0x18>
 5cc:	8c b7       	in	r24, 0x3c	; 60
 5ce:	c8 2b       	or	r28, r24
 5d0:	cc bf       	out	0x3c, r28	; 60
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <Timer_Set_Compare+0x26>
 5d4:	81 30       	cpi	r24, 0x01	; 1
 5d6:	29 f0       	breq	.+10     	; 0x5e2 <Timer_Set_Compare+0x26>
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	19 f4       	brne	.+6      	; 0x5e2 <Timer_Set_Compare+0x26>
 5dc:	83 b5       	in	r24, 0x23	; 35
 5de:	c8 2b       	or	r28, r24
 5e0:	c3 bd       	out	0x23, r28	; 35
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <__vector_10>:
//****************************************************************


//Timer/Counter0 Compare Match
void  __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	2f 93       	push	r18
 5f2:	3f 93       	push	r19
 5f4:	4f 93       	push	r20
 5f6:	5f 93       	push	r21
 5f8:	6f 93       	push	r22
 5fa:	7f 93       	push	r23
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
	Time_con[0].Timer_Call_Back_Compare();
 608:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <Time_con+0x6>
 60c:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <Time_con+0x7>
 610:	09 95       	icall
}
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_11>:


//Timer/Counter0 Overflow
void  __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	4f 93       	push	r20
 644:	5f 93       	push	r21
 646:	6f 93       	push	r22
 648:	7f 93       	push	r23
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	ef 93       	push	r30
 654:	ff 93       	push	r31
	Time_con[0].Timer_Call_Back_overflow();
 656:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <Time_con+0x8>
 65a:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <Time_con+0x9>
 65e:	09 95       	icall
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <__vector_4>:


//Timer/Counter2 Compare Match
void  __vector_4 (void) __attribute__((signal));
void __vector_4 (void){
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	2f 93       	push	r18
 68e:	3f 93       	push	r19
 690:	4f 93       	push	r20
 692:	5f 93       	push	r21
 694:	6f 93       	push	r22
 696:	7f 93       	push	r23
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
 69c:	af 93       	push	r26
 69e:	bf 93       	push	r27
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
	Time_con[2].Timer_Call_Back_Compare();
 6a4:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <Time_con+0x1a>
 6a8:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <Time_con+0x1b>
 6ac:	09 95       	icall
}
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__vector_5>:


//Timer/Counter2 Overflow
void  __vector_5 (void) __attribute__((signal));
void __vector_5 (void){
 6d0:	1f 92       	push	r1
 6d2:	0f 92       	push	r0
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	0f 92       	push	r0
 6d8:	11 24       	eor	r1, r1
 6da:	2f 93       	push	r18
 6dc:	3f 93       	push	r19
 6de:	4f 93       	push	r20
 6e0:	5f 93       	push	r21
 6e2:	6f 93       	push	r22
 6e4:	7f 93       	push	r23
 6e6:	8f 93       	push	r24
 6e8:	9f 93       	push	r25
 6ea:	af 93       	push	r26
 6ec:	bf 93       	push	r27
 6ee:	ef 93       	push	r30
 6f0:	ff 93       	push	r31
	Time_con[2].Timer_Call_Back_overflow();
 6f2:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <Time_con+0x1c>
 6f6:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <Time_con+0x1d>
 6fa:	09 95       	icall
}
 6fc:	ff 91       	pop	r31
 6fe:	ef 91       	pop	r30
 700:	bf 91       	pop	r27
 702:	af 91       	pop	r26
 704:	9f 91       	pop	r25
 706:	8f 91       	pop	r24
 708:	7f 91       	pop	r23
 70a:	6f 91       	pop	r22
 70c:	5f 91       	pop	r21
 70e:	4f 91       	pop	r20
 710:	3f 91       	pop	r19
 712:	2f 91       	pop	r18
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <_exit>:
 71e:	f8 94       	cli

00000720 <__stop_program>:
 720:	ff cf       	rjmp	.-2      	; 0x720 <__stop_program>
