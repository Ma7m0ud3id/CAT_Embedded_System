
task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000691  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000594  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cc  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA |= 0x3F;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8f 63       	ori	r24, 0x3F	; 63
  70:	8a bb       	out	0x1a, r24	; 26
	
    while (1) 
    {
		for (int i=0;i<6;i++)
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	16 c0       	rjmp	.+44     	; 0xa4 <main+0x38>
		{
			PORTA |= (1<<i);
  78:	4b b3       	in	r20, 0x1b	; 27
  7a:	81 e0       	ldi	r24, 0x01	; 1
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	02 2e       	mov	r0, r18
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x1a>
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	0a 94       	dec	r0
  88:	e2 f7       	brpl	.-8      	; 0x82 <main+0x16>
  8a:	84 2b       	or	r24, r20
  8c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	4f e9       	ldi	r20, 0x9F	; 159
  90:	86 e8       	ldi	r24, 0x86	; 134
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	41 50       	subi	r20, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
    /* Replace with your application code */
	DDRA |= 0x3F;
	
    while (1) 
    {
		for (int i=0;i<6;i++)
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	26 30       	cpi	r18, 0x06	; 6
  a6:	31 05       	cpc	r19, r1
  a8:	3c f3       	brlt	.-50     	; 0x78 <main+0xc>
  aa:	25 e0       	ldi	r18, 0x05	; 5
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	17 c0       	rjmp	.+46     	; 0xde <main+0x72>
			PORTA |= (1<<i);
			_delay_ms(500);
		}
		for (int i=5;i>=0;i--)
		{
			PORTA &= ~(1<<i);
  b0:	4b b3       	in	r20, 0x1b	; 27
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 2e       	mov	r0, r18
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x4e>
  c2:	80 95       	com	r24
  c4:	84 23       	and	r24, r20
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	4f e9       	ldi	r20, 0x9F	; 159
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x62>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
		for (int i=0;i<6;i++)
		{
			PORTA |= (1<<i);
			_delay_ms(500);
		}
		for (int i=5;i>=0;i--)
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	31 09       	sbc	r19, r1
  de:	33 23       	and	r19, r19
  e0:	3c f7       	brge	.-50     	; 0xb0 <main+0x44>
  e2:	2f e3       	ldi	r18, 0x3F	; 63
  e4:	4d e0       	ldi	r20, 0x0D	; 13
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	40 40       	sbci	r20, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x7c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
  f4:	be cf       	rjmp	.-132    	; 0x72 <main+0x6>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
