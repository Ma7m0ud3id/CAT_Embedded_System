
task4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000ee  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  0000018c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b4  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051c  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000207  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e2  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int8_t counter=0;	

int main(void)
{
    /* Replace with your application code */
	DDRA |= 0xFF;
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a bb       	out	0x1a, r24	; 26
	DDRB &= 0x03;
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	83 70       	andi	r24, 0x03	; 3
  9c:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
		//PORTA &=~(3<<0);
		PORTA = segCthd[counter];
  9e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
  a2:	0e 2e       	mov	r0, r30
  a4:	00 0c       	add	r0, r0
  a6:	ff 0b       	sbc	r31, r31
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	80 81       	ld	r24, Z
  ae:	8b bb       	out	0x1b, r24	; 27
		
		
		if(counter<0){
  b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  b4:	88 23       	and	r24, r24
  b6:	1c f4       	brge	.+6      	; 0xbe <main+0x2c>
			counter=0;
  b8:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
  bc:	f0 cf       	rjmp	.-32     	; 0x9e <main+0xc>
		}else if(counter>9){
  be:	8a 30       	cpi	r24, 0x0A	; 10
  c0:	24 f0       	brlt	.+8      	; 0xca <main+0x38>
			counter=9;
  c2:	89 e0       	ldi	r24, 0x09	; 9
  c4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
  c8:	ea cf       	rjmp	.-44     	; 0x9e <main+0xc>
		}else{
			
			if((PINB>>0)&1){
  ca:	b0 9b       	sbis	0x16, 0	; 22
  cc:	06 c0       	rjmp	.+12     	; 0xda <main+0x48>
				counter++;
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
				while((PINB>>0)&1);
  d4:	b0 99       	sbic	0x16, 0	; 22
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <main+0x42>
  d8:	e2 cf       	rjmp	.-60     	; 0x9e <main+0xc>
				
				}else if((PINB>>1)&1){
  da:	b1 9b       	sbis	0x16, 1	; 22
  dc:	e0 cf       	rjmp	.-64     	; 0x9e <main+0xc>
				counter--;
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
				while((PINB>>1)&1);
  e4:	b1 99       	sbic	0x16, 1	; 22
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x52>
  e8:	da cf       	rjmp	.-76     	; 0x9e <main+0xc>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
