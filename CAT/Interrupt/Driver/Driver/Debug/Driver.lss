
Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000038e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bff  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bc  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000557  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038d  00000000  00000000  0000243b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_1>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_2>
   c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8a:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Get_LED>:
#include "Keypad.h"
#include "EXTI.h"
EXTI_Typedef EXTI_con;

void Get_LED(){
	Toggel_PIN(PORTA,PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	8b e3       	ldi	r24, 0x3B	; 59
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 a5 00 	call	0x14a	; 0x14a <Toggel_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e4       	ldi	r24, 0x4F	; 79
  9e:	93 ec       	ldi	r25, 0xC3	; 195
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <Get_LED+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <Get_LED+0x14>
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <main>:
int main(void)
{
	
	
	
	EXTI_con.EXTI_Name=INT0;
  aa:	e0 e6       	ldi	r30, 0x60	; 96
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	EXTI_con.EXTI_Mode=falling;
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	81 83       	std	Z+1, r24	; 0x01
	EXTI_con.EXTI_Function=Get_LED;
  b4:	89 e4       	ldi	r24, 0x49	; 73
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	93 83       	std	Z+3, r25	; 0x03
  ba:	82 83       	std	Z+2, r24	; 0x02
	DIR_PIN(DDRA,PIN0,OUTPUT);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	8a e3       	ldi	r24, 0x3A	; 58
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 88 00 	call	0x110	; 0x110 <DIR_PIN>
	DIR_PIN(DDRD,PIN2,INPUT);
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	81 e3       	ldi	r24, 0x31	; 49
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 88 00 	call	0x110	; 0x110 <DIR_PIN>
	DIR_PIN(DDRD,PIN3,INPUT);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	63 e0       	ldi	r22, 0x03	; 3
  d8:	81 e3       	ldi	r24, 0x31	; 49
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 88 00 	call	0x110	; 0x110 <DIR_PIN>
	EXTI_INIT(&EXTI_con);
  e0:	80 e6       	ldi	r24, 0x60	; 96
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 b1 00 	call	0x162	; 0x162 <EXTI_INIT>
	Toggel_PIN(PORTA,PIN0);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	8b e3       	ldi	r24, 0x3B	; 59
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 a5 00 	call	0x14a	; 0x14a <Toggel_PIN>
  f2:	2f e3       	ldi	r18, 0x3F	; 63
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x4e>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x58>
 102:	00 00       	nop
	_delay_ms(1000);
	Toggel_PIN(PORTA,PIN0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	8b e3       	ldi	r24, 0x3B	; 59
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 a5 00 	call	0x14a	; 0x14a <Toggel_PIN>
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x64>

00000110 <DIR_PIN>:
	
	*PORTx=0xff;
	
}
void Set_PIN(uint8_t *PORTx,uint8_t pin){
	*PORTx|=(1<<pin);
 110:	41 30       	cpi	r20, 0x01	; 1
 112:	61 f4       	brne	.+24     	; 0x12c <DIR_PIN+0x1c>
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIR_PIN+0xe>
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIR_PIN+0xa>
 122:	fc 01       	movw	r30, r24
 124:	30 81       	ld	r19, Z
 126:	23 2b       	or	r18, r19
 128:	20 83       	st	Z, r18
 12a:	08 95       	ret
 12c:	41 11       	cpse	r20, r1
 12e:	0c c0       	rjmp	.+24     	; 0x148 <DIR_PIN+0x38>
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIR_PIN+0x2a>
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIR_PIN+0x26>
 13e:	20 95       	com	r18
 140:	fc 01       	movw	r30, r24
 142:	30 81       	ld	r19, Z
 144:	23 23       	and	r18, r19
 146:	20 83       	st	Z, r18
 148:	08 95       	ret

0000014a <Toggel_PIN>:
	
}


void Toggel_PIN(uint8_t *PORTx,uint8_t pin){
	*PORTx^=(1<<pin);
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <Toggel_PIN+0xa>
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <Toggel_PIN+0x6>
 158:	fc 01       	movw	r30, r24
 15a:	30 81       	ld	r19, Z
 15c:	23 27       	eor	r18, r19
 15e:	20 83       	st	Z, r18
 160:	08 95       	ret

00000162 <EXTI_INIT>:
/********************************************************************
                                 API
*********************************************************************/
void EXTI_INIT(EXTI_Typedef* EXTIx){
	
	EXTI_config=EXTIx;
 162:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <EXTI_config+0x1>
 166:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <EXTI_config>
	Register is cleared, none of the interrupts are enabled independent of the individual interrupt
	enable settings. The I-bit is cleared by hardware after an interrupt has occurred, and is set by
	the RETI instruction to enable subsequent interrupts. The I-bit can also be set and cleared by
	the application with the SEI and CLI instructions, as described in the instruction set reference.
	*/
	*SREG|=(1<<7);
 16a:	8f b7       	in	r24, 0x3f	; 63
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	8f bf       	out	0x3f, r24	; 63
	
	
	
	if(EXTI_config->EXTI_Name==INT0){
 170:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_config>
 174:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_config+0x1>
 178:	80 81       	ld	r24, Z
 17a:	81 11       	cpse	r24, r1
 17c:	1d c0       	rjmp	.+58     	; 0x1b8 <EXTI_INIT+0x56>
	//• Bit 6 – INT0: External Interrupt Request 0 Enable
	*GICR|=(1<<6);
 17e:	8b b7       	in	r24, 0x3b	; 59
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b bf       	out	0x3b, r24	; 59
	1 0 The falling edge of INT0 generates an interrupt request.
	1 1 The rising edge of INT0 generates an interrupt request.
	*/
	//x=EXTI_config->EXTI_Mode;
	
	if(EXTI_config->EXTI_Mode==logical){
 184:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_config>
 188:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_config+0x1>
 18c:	81 81       	ldd	r24, Z+1	; 0x01
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	21 f4       	brne	.+8      	; 0x19a <EXTI_INIT+0x38>
			*MCUCR|=(0b01<<0);
 192:	85 b7       	in	r24, 0x35	; 53
 194:	81 60       	ori	r24, 0x01	; 1
 196:	85 bf       	out	0x35, r24	; 53
 198:	08 95       	ret
	 }else if(EXTI_config->EXTI_Mode==low_level){
 19a:	81 11       	cpse	r24, r1
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <EXTI_INIT+0x42>
	 *MCUCR|=(0b00<<0);
 19e:	85 b7       	in	r24, 0x35	; 53
 1a0:	85 bf       	out	0x35, r24	; 53
 1a2:	08 95       	ret
		 
	 }else if(EXTI_config->EXTI_Mode==falling){
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <EXTI_INIT+0x4e>
		 *MCUCR|=(0b10<<0);
 1a8:	85 b7       	in	r24, 0x35	; 53
 1aa:	82 60       	ori	r24, 0x02	; 2
 1ac:	85 bf       	out	0x35, r24	; 53
 1ae:	08 95       	ret
		 
	 }else{
		 *MCUCR|=(0b11<<0);
 1b0:	85 b7       	in	r24, 0x35	; 53
 1b2:	83 60       	ori	r24, 0x03	; 3
 1b4:	85 bf       	out	0x35, r24	; 53
 1b6:	08 95       	ret
		 
	 }
	   
		
		
	}else if(EXTI_config->EXTI_Name==INT1){
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	e9 f4       	brne	.+58     	; 0x1f6 <EXTI_INIT+0x94>
	
	//• Bit 7 – INT1: External Interrupt Request 1 Enable
	*GICR|=(1<<7);
 1bc:	8b b7       	in	r24, 0x3b	; 59
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8b bf       	out	0x3b, r24	; 59
	0 0 The low level of INT1 generates an interrupt request.
	0 1 Any logical change on INT1 generates an interrupt request.
	1 0 The falling edge of INT1 generates an interrupt request.
	1 1 The rising edge of INT1 generates an interrupt request.
	*/
	if(EXTI_config->EXTI_Mode==logical){
 1c2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_config>
 1c6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_config+0x1>
 1ca:	81 81       	ldd	r24, Z+1	; 0x01
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	21 f4       	brne	.+8      	; 0x1d8 <EXTI_INIT+0x76>
		*MCUCR|=(0b01<<2);
 1d0:	85 b7       	in	r24, 0x35	; 53
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	85 bf       	out	0x35, r24	; 53
 1d6:	08 95       	ret
	
	
	}else if(EXTI_config->EXTI_Mode==low_level){
 1d8:	81 11       	cpse	r24, r1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <EXTI_INIT+0x80>
		*MCUCR|=(0b00<<2);
 1dc:	85 b7       	in	r24, 0x35	; 53
 1de:	85 bf       	out	0x35, r24	; 53
 1e0:	08 95       	ret
		
		}else if(EXTI_config->EXTI_Mode==falling){
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	21 f4       	brne	.+8      	; 0x1ee <EXTI_INIT+0x8c>
		*MCUCR|=(0b10<<2);
 1e6:	85 b7       	in	r24, 0x35	; 53
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	85 bf       	out	0x35, r24	; 53
 1ec:	08 95       	ret
		
		}else{
		*MCUCR|=(0b11<<2);
 1ee:	85 b7       	in	r24, 0x35	; 53
 1f0:	8c 60       	ori	r24, 0x0C	; 12
 1f2:	85 bf       	out	0x35, r24	; 53
 1f4:	08 95       	ret
	
		
	}else {
	
		//• Bit 5 – INT2: External Interrupt Request 2 Enable
		*GICR|=(1<<5);
 1f6:	8b b7       	in	r24, 0x3b	; 59
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8b bf       	out	0x3b, r24	; 59
	the corresponding interrupt mask in GICR are set. If ISC2 is written to zero, a falling edge on
	INT2 activates the interrupt. If ISC2 is written to one, a rising edge on INT2 activates the interrupt. Edges on INT2 are registered asynchronously. Pulses on INT2 wider than the minimum
	pulse width given in
	*/
		
	  if(EXTI_config->EXTI_Mode==falling){
 1fc:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_config>
 200:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_config+0x1>
 204:	81 81       	ldd	r24, Z+1	; 0x01
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	21 f4       	brne	.+8      	; 0x212 <EXTI_INIT+0xb0>
			*MCUCSR &=~(1<<6);
 20a:	84 b7       	in	r24, 0x34	; 52
 20c:	8f 7b       	andi	r24, 0xBF	; 191
 20e:	84 bf       	out	0x34, r24	; 52
 210:	08 95       	ret
			
		}else{
			*MCUCSR |=(1<<6);
 212:	84 b7       	in	r24, 0x34	; 52
 214:	80 64       	ori	r24, 0x40	; 64
 216:	84 bf       	out	0x34, r24	; 52
 218:	08 95       	ret

0000021a <__vector_1>:
	
	EXTI_config->EXTI_Function();
	
}*/
void  __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	5f 93       	push	r21
 22c:	6f 93       	push	r22
 22e:	7f 93       	push	r23
 230:	8f 93       	push	r24
 232:	9f 93       	push	r25
 234:	af 93       	push	r26
 236:	bf 93       	push	r27
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
	EXTI_config->EXTI_Function();
 23c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_config>
 240:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_config+0x1>
 244:	02 80       	ldd	r0, Z+2	; 0x02
 246:	f3 81       	ldd	r31, Z+3	; 0x03
 248:	e0 2d       	mov	r30, r0
 24a:	09 95       	icall
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_2>:

void  __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	EXTI_config->EXTI_Function();
 290:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_config>
 294:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_config+0x1>
 298:	02 80       	ldd	r0, Z+2	; 0x02
 29a:	f3 81       	ldd	r31, Z+3	; 0x03
 29c:	e0 2d       	mov	r30, r0
 29e:	09 95       	icall
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_3>:

void  __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	EXTI_config->EXTI_Function();
 2e4:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTI_config>
 2e8:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTI_config+0x1>
 2ec:	02 80       	ldd	r0, Z+2	; 0x02
 2ee:	f3 81       	ldd	r31, Z+3	; 0x03
 2f0:	e0 2d       	mov	r30, r0
 2f2:	09 95       	icall
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
