
project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f44  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000f44  00000fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db5  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000827  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000806  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000466  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008d9  00000000  00000000  00003486  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ed 01 	call	0x3da	; 0x3da <main>
  7a:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_Init>:
int Row []={R0,R1,R2,R3};
int Culom []={C0,C1,C2,C3};


void Keypad_Init (void){
	Keypad_control &= ~((1<<R0)|(1<<R1)|(1<<R2)|(1<<R3));
  82:	84 b3       	in	r24, 0x14	; 20
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	84 bb       	out	0x14, r24	; 20
	Keypad_control |=((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	84 bb       	out	0x14, r24	; 20
	Keypad=0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	85 bb       	out	0x15, r24	; 21
  92:	08 95       	ret

00000094 <Keypad_Result>:
}
unsigned char Keypad_Result (void){
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
	int i,j;
	for (i=0;i<4;i++)
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	9d c0       	rjmp	.+314    	; 0x1dc <Keypad_Result+0x148>
	{
		Keypad |= ((1<<Culom[0]) | (1<<Culom[1]) | (1<<Culom[2]) | (1<<Culom[3]));
  a2:	35 b3       	in	r19, 0x15	; 21
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	8c 01       	movw	r16, r24
  ae:	00 80       	ld	r0, Z
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <Keypad_Result+0x22>
  b2:	00 0f       	add	r16, r16
  b4:	11 1f       	adc	r17, r17
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <Keypad_Result+0x1e>
  ba:	ec 01       	movw	r28, r24
  bc:	02 80       	ldd	r0, Z+2	; 0x02
  be:	02 c0       	rjmp	.+4      	; 0xc4 <Keypad_Result+0x30>
  c0:	cc 0f       	add	r28, r28
  c2:	dd 1f       	adc	r29, r29
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <Keypad_Result+0x2c>
  c8:	dc 01       	movw	r26, r24
  ca:	04 80       	ldd	r0, Z+4	; 0x04
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <Keypad_Result+0x3e>
  ce:	aa 0f       	add	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <Keypad_Result+0x3a>
  d6:	bc 01       	movw	r22, r24
  d8:	06 80       	ldd	r0, Z+6	; 0x06
  da:	02 c0       	rjmp	.+4      	; 0xe0 <Keypad_Result+0x4c>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <Keypad_Result+0x48>
  e4:	2c 2f       	mov	r18, r28
  e6:	20 2b       	or	r18, r16
  e8:	2a 2b       	or	r18, r26
  ea:	26 2b       	or	r18, r22
  ec:	23 2b       	or	r18, r19
  ee:	25 bb       	out	0x15, r18	; 21
		Keypad &=~(1<<Culom[i]);
  f0:	25 b3       	in	r18, 0x15	; 21
  f2:	fa 01       	movw	r30, r20
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	00 80       	ld	r0, Z
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Keypad_Result+0x70>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <Keypad_Result+0x6c>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	85 bb       	out	0x15, r24	; 21
		for(j = 0; j < 4; j++){
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	5e c0       	rjmp	.+188    	; 0x1d0 <Keypad_Result+0x13c>
			if (!(Keypad_Pin & (1 << Row[j])))
 114:	83 b3       	in	r24, 0x13	; 19
 116:	fb 01       	movw	r30, r22
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	e8 59       	subi	r30, 0x98	; 152
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	20 81       	ld	r18, Z
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <Keypad_Result+0x98>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <Keypad_Result+0x94>
 130:	80 fd       	sbrc	r24, 0
 132:	4c c0       	rjmp	.+152    	; 0x1cc <Keypad_Result+0x138>
			{
				while(!(Keypad_Pin & (1 << Row[j])));
 134:	83 b3       	in	r24, 0x13	; 19
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <Keypad_Result+0xac>
 13c:	95 95       	asr	r25
 13e:	87 95       	ror	r24
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <Keypad_Result+0xa8>
 144:	80 ff       	sbrs	r24, 0
 146:	f6 cf       	rjmp	.-20     	; 0x134 <Keypad_Result+0xa0>
				switch(i){
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	51 05       	cpc	r21, r1
 14c:	c9 f0       	breq	.+50     	; 0x180 <Keypad_Result+0xec>
 14e:	24 f4       	brge	.+8      	; 0x158 <Keypad_Result+0xc4>
 150:	41 15       	cp	r20, r1
 152:	51 05       	cpc	r21, r1
 154:	41 f0       	breq	.+16     	; 0x166 <Keypad_Result+0xd2>
 156:	3a c0       	rjmp	.+116    	; 0x1cc <Keypad_Result+0x138>
 158:	42 30       	cpi	r20, 0x02	; 2
 15a:	51 05       	cpc	r21, r1
 15c:	f1 f0       	breq	.+60     	; 0x19a <Keypad_Result+0x106>
 15e:	43 30       	cpi	r20, 0x03	; 3
 160:	51 05       	cpc	r21, r1
 162:	41 f1       	breq	.+80     	; 0x1b4 <Keypad_Result+0x120>
 164:	33 c0       	rjmp	.+102    	; 0x1cc <Keypad_Result+0x138>
					case (0):
					if (j == 0) return '7';
 166:	61 15       	cp	r22, r1
 168:	71 05       	cpc	r23, r1
 16a:	f1 f1       	breq	.+124    	; 0x1e8 <Keypad_Result+0x154>
					else if (j == 1) return '4';
 16c:	61 30       	cpi	r22, 0x01	; 1
 16e:	71 05       	cpc	r23, r1
 170:	e9 f1       	breq	.+122    	; 0x1ec <Keypad_Result+0x158>
					else if (j == 2) return '1';
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	71 05       	cpc	r23, r1
 176:	e1 f1       	breq	.+120    	; 0x1f0 <Keypad_Result+0x15c>
					else if (j == 3) return '?';
 178:	63 30       	cpi	r22, 0x03	; 3
 17a:	71 05       	cpc	r23, r1
 17c:	39 f5       	brne	.+78     	; 0x1cc <Keypad_Result+0x138>
 17e:	3a c0       	rjmp	.+116    	; 0x1f4 <Keypad_Result+0x160>
					break;
					case (1):
					if (j == 0) return '8';
 180:	61 15       	cp	r22, r1
 182:	71 05       	cpc	r23, r1
 184:	c9 f1       	breq	.+114    	; 0x1f8 <Keypad_Result+0x164>
					else if (j == 1) return '5';
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	71 05       	cpc	r23, r1
 18a:	c1 f1       	breq	.+112    	; 0x1fc <Keypad_Result+0x168>
					else if (j == 2) return '2';
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	71 05       	cpc	r23, r1
 190:	b9 f1       	breq	.+110    	; 0x200 <Keypad_Result+0x16c>
					else if (j == 3) return '0';
 192:	63 30       	cpi	r22, 0x03	; 3
 194:	71 05       	cpc	r23, r1
 196:	d1 f4       	brne	.+52     	; 0x1cc <Keypad_Result+0x138>
 198:	35 c0       	rjmp	.+106    	; 0x204 <Keypad_Result+0x170>
					break;
					case (2):
					if (j == 0) return '9';
 19a:	61 15       	cp	r22, r1
 19c:	71 05       	cpc	r23, r1
 19e:	a1 f1       	breq	.+104    	; 0x208 <Keypad_Result+0x174>
					else if (j == 1) return '6';
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	71 05       	cpc	r23, r1
 1a4:	99 f1       	breq	.+102    	; 0x20c <Keypad_Result+0x178>
					else if (j == 2) return '3';
 1a6:	62 30       	cpi	r22, 0x02	; 2
 1a8:	71 05       	cpc	r23, r1
 1aa:	91 f1       	breq	.+100    	; 0x210 <Keypad_Result+0x17c>
					else if (j == 3) return '=';
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	71 05       	cpc	r23, r1
 1b0:	69 f4       	brne	.+26     	; 0x1cc <Keypad_Result+0x138>
 1b2:	30 c0       	rjmp	.+96     	; 0x214 <Keypad_Result+0x180>
					break;
					case (3):
					if (j == 0) return '/';
 1b4:	61 15       	cp	r22, r1
 1b6:	71 05       	cpc	r23, r1
 1b8:	79 f1       	breq	.+94     	; 0x218 <Keypad_Result+0x184>
					else if (j == 1) return '*';
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	71 05       	cpc	r23, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <Keypad_Result+0x188>
					else if (j == 2) return '-';
 1c0:	62 30       	cpi	r22, 0x02	; 2
 1c2:	71 05       	cpc	r23, r1
 1c4:	69 f1       	breq	.+90     	; 0x220 <Keypad_Result+0x18c>
					else if (j == 3) return '+';
 1c6:	63 30       	cpi	r22, 0x03	; 3
 1c8:	71 05       	cpc	r23, r1
 1ca:	61 f1       	breq	.+88     	; 0x224 <Keypad_Result+0x190>
	int i,j;
	for (i=0;i<4;i++)
	{
		Keypad |= ((1<<Culom[0]) | (1<<Culom[1]) | (1<<Culom[2]) | (1<<Culom[3]));
		Keypad &=~(1<<Culom[i]);
		for(j = 0; j < 4; j++){
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	64 30       	cpi	r22, 0x04	; 4
 1d2:	71 05       	cpc	r23, r1
 1d4:	0c f4       	brge	.+2      	; 0x1d8 <Keypad_Result+0x144>
 1d6:	9e cf       	rjmp	.-196    	; 0x114 <Keypad_Result+0x80>
	Keypad_control |=((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));
	Keypad=0xFF;
}
unsigned char Keypad_Result (void){
	int i,j;
	for (i=0;i<4;i++)
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
 1dc:	44 30       	cpi	r20, 0x04	; 4
 1de:	51 05       	cpc	r21, r1
 1e0:	0c f4       	brge	.+2      	; 0x1e4 <Keypad_Result+0x150>
 1e2:	5f cf       	rjmp	.-322    	; 0xa2 <Keypad_Result+0xe>
					break;
				}
			}
		}
	}
	return 'A';
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	1f c0       	rjmp	.+62     	; 0x226 <Keypad_Result+0x192>
			if (!(Keypad_Pin & (1 << Row[j])))
			{
				while(!(Keypad_Pin & (1 << Row[j])));
				switch(i){
					case (0):
					if (j == 0) return '7';
 1e8:	87 e3       	ldi	r24, 0x37	; 55
 1ea:	1d c0       	rjmp	.+58     	; 0x226 <Keypad_Result+0x192>
					else if (j == 1) return '4';
 1ec:	84 e3       	ldi	r24, 0x34	; 52
 1ee:	1b c0       	rjmp	.+54     	; 0x226 <Keypad_Result+0x192>
					else if (j == 2) return '1';
 1f0:	81 e3       	ldi	r24, 0x31	; 49
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <Keypad_Result+0x192>
					else if (j == 3) return '?';
 1f4:	8f e3       	ldi	r24, 0x3F	; 63
 1f6:	17 c0       	rjmp	.+46     	; 0x226 <Keypad_Result+0x192>
					break;
					case (1):
					if (j == 0) return '8';
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	15 c0       	rjmp	.+42     	; 0x226 <Keypad_Result+0x192>
					else if (j == 1) return '5';
 1fc:	85 e3       	ldi	r24, 0x35	; 53
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <Keypad_Result+0x192>
					else if (j == 2) return '2';
 200:	82 e3       	ldi	r24, 0x32	; 50
 202:	11 c0       	rjmp	.+34     	; 0x226 <Keypad_Result+0x192>
					else if (j == 3) return '0';
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	0f c0       	rjmp	.+30     	; 0x226 <Keypad_Result+0x192>
					break;
					case (2):
					if (j == 0) return '9';
 208:	89 e3       	ldi	r24, 0x39	; 57
 20a:	0d c0       	rjmp	.+26     	; 0x226 <Keypad_Result+0x192>
					else if (j == 1) return '6';
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	0b c0       	rjmp	.+22     	; 0x226 <Keypad_Result+0x192>
					else if (j == 2) return '3';
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	09 c0       	rjmp	.+18     	; 0x226 <Keypad_Result+0x192>
					else if (j == 3) return '=';
 214:	8d e3       	ldi	r24, 0x3D	; 61
 216:	07 c0       	rjmp	.+14     	; 0x226 <Keypad_Result+0x192>
					break;
					case (3):
					if (j == 0) return '/';
 218:	8f e2       	ldi	r24, 0x2F	; 47
 21a:	05 c0       	rjmp	.+10     	; 0x226 <Keypad_Result+0x192>
					else if (j == 1) return '*';
 21c:	8a e2       	ldi	r24, 0x2A	; 42
 21e:	03 c0       	rjmp	.+6      	; 0x226 <Keypad_Result+0x192>
					else if (j == 2) return '-';
 220:	8d e2       	ldi	r24, 0x2D	; 45
 222:	01 c0       	rjmp	.+2      	; 0x226 <Keypad_Result+0x192>
					else if (j == 3) return '+';
 224:	8b e2       	ldi	r24, 0x2B	; 43
			}
		}
	}
	return 'A';
	
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <LCD_lcd_kick>:
	Dir_lcd_port=0xFF;
	lcd_control &= ~(1<<RW_switch);
	
}*/
void LCD_lcd_kick(){
	lcd_control |= (1 << E_switch);
 230:	88 b3       	in	r24, 0x18	; 24
 232:	88 60       	ori	r24, 0x08	; 8
 234:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	83 ed       	ldi	r24, 0xD3	; 211
 238:	90 e3       	ldi	r25, 0x30	; 48
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_lcd_kick+0xa>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_lcd_kick+0x10>
 240:	00 00       	nop
	_delay_ms(50);
	lcd_control &= ~(1 << E_switch);
 242:	88 b3       	in	r24, 0x18	; 24
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	88 bb       	out	0x18, r24	; 24
 248:	08 95       	ret

0000024a <LCD_check_lcd_isbusy>:
}

void LCD_check_lcd_isbusy(){
	Dir_lcd_port &= ~(0xFF<<Shift);
 24a:	8a b3       	in	r24, 0x1a	; 26
 24c:	1a ba       	out	0x1a, r1	; 26
	lcd_control |= (1 << RW_switch);
 24e:	88 b3       	in	r24, 0x18	; 24
 250:	84 60       	ori	r24, 0x04	; 4
 252:	88 bb       	out	0x18, r24	; 24
	lcd_control &= ~(1 << RS_switch);
 254:	88 b3       	in	r24, 0x18	; 24
 256:	8d 7f       	andi	r24, 0xFD	; 253
 258:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 25a:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
	Dir_lcd_port |= (0xFF<<Shift);
 25e:	8a b3       	in	r24, 0x1a	; 26
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	8a bb       	out	0x1a, r24	; 26
	lcd_control &= ~(1 << RW_switch);
 264:	88 b3       	in	r24, 0x18	; 24
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	88 bb       	out	0x18, r24	; 24
 26a:	08 95       	ret

0000026c <Send_command>:
	
}


void Send_command (unsigned char command){
 26c:	cf 93       	push	r28
 26e:	c8 2f       	mov	r28, r24
	
	LCD_check_lcd_isbusy();
 270:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_check_lcd_isbusy>
	PORTA=command;
	_delay_ms(1);
	LCD_lcd_kick();
    #endif
	#ifdef FOUR_BIT_MODE
	LCD_check_lcd_isbusy();
 274:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_check_lcd_isbusy>
	lcd_port = command;
 278:	cb bb       	out	0x1b, r28	; 27
	lcd_control &= ~((1 << RS_switch) | (1<<RW_switch));
 27a:	88 b3       	in	r24, 0x18	; 24
 27c:	89 7f       	andi	r24, 0xF9	; 249
 27e:	88 bb       	out	0x18, r24	; 24
 280:	89 ef       	ldi	r24, 0xF9	; 249
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <Send_command+0x18>
 288:	00 c0       	rjmp	.+0      	; 0x28a <Send_command+0x1e>
 28a:	00 00       	nop
	_delay_ms(1);
	LCD_lcd_kick();
 28c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
	#endif
	#ifdef FOUR_BIT_MODE
	LCD_check_lcd_isbusy();
 290:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_check_lcd_isbusy>
	lcd_port = (lcd_port & 0x0F) | (command & 0xF0);
 294:	8b b3       	in	r24, 0x1b	; 27
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	9c 2f       	mov	r25, r28
 29a:	90 7f       	andi	r25, 0xF0	; 240
 29c:	89 2b       	or	r24, r25
 29e:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ ((1<<RW_switch)|(1<<RS_switch));
 2a0:	88 b3       	in	r24, 0x18	; 24
 2a2:	89 7f       	andi	r24, 0xF9	; 249
 2a4:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 2a6:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
	lcd_port = (lcd_port & 0x0F) | (command << 4);
 2aa:	2b b3       	in	r18, 0x1b	; 27
 2ac:	30 e1       	ldi	r19, 0x10	; 16
 2ae:	c3 9f       	mul	r28, r19
 2b0:	c0 01       	movw	r24, r0
 2b2:	11 24       	eor	r1, r1
 2b4:	92 2f       	mov	r25, r18
 2b6:	9f 70       	andi	r25, 0x0F	; 15
 2b8:	89 2b       	or	r24, r25
 2ba:	8b bb       	out	0x1b, r24	; 27
	lcd_control &= ~ ((1<<RW_switch)|(1<<RS_switch));
 2bc:	88 b3       	in	r24, 0x18	; 24
 2be:	89 7f       	andi	r24, 0xF9	; 249
 2c0:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 2c2:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
    #endif
	
	
	
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_clear_screen>:
void LCD_clear_screen(){
	Send_command(LCD_CLEAR_SCREEN);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
 2d0:	08 95       	ret

000002d2 <Lcd_init>:
 2d2:	87 e8       	ldi	r24, 0x87	; 135
 2d4:	93 e1       	ldi	r25, 0x13	; 19
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <Lcd_init+0x4>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <Lcd_init+0xa>
 2dc:	00 00       	nop
}
void Lcd_init (){
	_delay_ms(20);
	//Lcd_ispusy();
	Dir_lcd_control |= ((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
 2de:	87 b3       	in	r24, 0x17	; 23
 2e0:	8e 60       	ori	r24, 0x0E	; 14
 2e2:	87 bb       	out	0x17, r24	; 23
	lcd_control &= ~((1<<RW_switch)|(1<<RS_switch)|(1<<E_switch));
 2e4:	88 b3       	in	r24, 0x18	; 24
 2e6:	81 7f       	andi	r24, 0xF1	; 241
 2e8:	88 bb       	out	0x18, r24	; 24
	Dir_lcd_port = 0xFF;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	8a bb       	out	0x1a, r24	; 26
 2ee:	85 ea       	ldi	r24, 0xA5	; 165
 2f0:	9e e0       	ldi	r25, 0x0E	; 14
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Lcd_init+0x20>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <Lcd_init+0x26>
 2f8:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 2fa:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	   Send_command(LCD_FUNCTION_8BIT_2LINES);
	#endif
	#ifdef FOUR_BIT_MODE
	Send_command(0x02);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
	Send_command(LCD_FUNCTION_4BIT_2LINES);
 304:	88 e2       	ldi	r24, 0x28	; 40
 306:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
    #endif
	Send_command(LCD_ENTRY_MODE);
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
	Send_command(LCD_BEGIN_AT_FIRST_ROW);
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
	Send_command(LCD_DISP_ON_CURSOR_BLINK);
 316:	8f e0       	ldi	r24, 0x0F	; 15
 318:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
 31c:	08 95       	ret

0000031e <LCD_WRITE_CHAR>:
	Kick();
	#endif
	#ifdef FOUR_BIT_MODE
	#endif
}*/
void LCD_WRITE_CHAR(unsigned char character){
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCD_lcd_kick();
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_check_lcd_isbusy();
	lcd_port = (lcd_port & 0x0F) | (character & 0xF0);
 322:	8b b3       	in	r24, 0x1b	; 27
 324:	8f 70       	andi	r24, 0x0F	; 15
 326:	9c 2f       	mov	r25, r28
 328:	90 7f       	andi	r25, 0xF0	; 240
 32a:	89 2b       	or	r24, r25
 32c:	8b bb       	out	0x1b, r24	; 27
	lcd_control |= 1<<RS_switch; //turn RS ON for Data mode.
 32e:	88 b3       	in	r24, 0x18	; 24
 330:	82 60       	ori	r24, 0x02	; 2
 332:	88 bb       	out	0x18, r24	; 24
	lcd_control &= ~ (1<<RW_switch);//turn RW off so you can write.
 334:	88 b3       	in	r24, 0x18	; 24
 336:	8b 7f       	andi	r24, 0xFB	; 251
 338:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
 33a:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
	lcd_port = (lcd_port & 0x0F) | (character << 4);
 33e:	2b b3       	in	r18, 0x1b	; 27
 340:	30 e1       	ldi	r19, 0x10	; 16
 342:	c3 9f       	mul	r28, r19
 344:	c0 01       	movw	r24, r0
 346:	11 24       	eor	r1, r1
 348:	92 2f       	mov	r25, r18
 34a:	9f 70       	andi	r25, 0x0F	; 15
 34c:	89 2b       	or	r24, r25
 34e:	8b bb       	out	0x1b, r24	; 27
	lcd_control |= 1<<RS_switch; //turn RS ON for Data mode.
 350:	88 b3       	in	r24, 0x18	; 24
 352:	82 60       	ori	r24, 0x02	; 2
 354:	88 bb       	out	0x18, r24	; 24
	lcd_control &= ~ (1<<RW_switch);//turn RW off so you can write.
 356:	88 b3       	in	r24, 0x18	; 24
 358:	8b 7f       	andi	r24, 0xFB	; 251
 35a:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick ();
 35c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_lcd_kick>
	#endif
}
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <gotoXY>:
void gotoXY (unsigned char line,unsigned char posetion){
	if(line==2){
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	39 f4       	brne	.+14     	; 0x376 <gotoXY+0x12>
		if (posetion < 16 && posetion >= 0)
 368:	60 31       	cpi	r22, 0x10	; 16
 36a:	68 f4       	brcc	.+26     	; 0x386 <gotoXY+0x22>
		{
			Send_command(LCD_BEGIN_AT_SECOND_ROW+posetion);
 36c:	80 ec       	ldi	r24, 0xC0	; 192
 36e:	86 0f       	add	r24, r22
 370:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
 374:	08 95       	ret
		}
		
	}else if(line==1){
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	31 f4       	brne	.+12     	; 0x386 <gotoXY+0x22>
		if (posetion < 16 && posetion >= 0)
 37a:	60 31       	cpi	r22, 0x10	; 16
 37c:	20 f4       	brcc	.+8      	; 0x386 <gotoXY+0x22>
		{
			Send_command(LCD_BEGIN_AT_FIRST_ROW+posetion);
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	86 0f       	add	r24, r22
 382:	0e 94 36 01 	call	0x26c	; 0x26c <Send_command>
 386:	08 95       	ret

00000388 <Send_string>:
		}
	}
}
void Send_string (char* data){
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	8c 01       	movw	r16, r24
	int count=0;
 392:	c0 e0       	ldi	r28, 0x00	; 0
 394:	d0 e0       	ldi	r29, 0x00	; 0
	while (*data>0)
 396:	18 c0       	rjmp	.+48     	; 0x3c8 <Send_string+0x40>
	{
		
		LCD_WRITE_CHAR(*data++);
 398:	0f 5f       	subi	r16, 0xFF	; 255
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
 39c:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
		count++;
 3a0:	21 96       	adiw	r28, 0x01	; 1
		if (count==16)
 3a2:	c0 31       	cpi	r28, 0x10	; 16
 3a4:	d1 05       	cpc	r29, r1
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <Send_string+0x2a>
		{
			gotoXY(2,0);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	0e 94 b2 01 	call	0x364	; 0x364 <gotoXY>
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <Send_string+0x40>
	     }else if (count==32)
 3b2:	c0 32       	cpi	r28, 0x20	; 32
 3b4:	d1 05       	cpc	r29, r1
 3b6:	41 f4       	brne	.+16     	; 0x3c8 <Send_string+0x40>
	    {
		   LCD_clear_screen();
 3b8:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_clear_screen>
		   gotoXY(1,0);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 b2 01 	call	0x364	; 0x364 <gotoXY>
		   count = 0;
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
}
void Send_string (char* data){
	int count=0;
	while (*data>0)
 3c8:	f8 01       	movw	r30, r16
 3ca:	80 81       	ld	r24, Z
 3cc:	81 11       	cpse	r24, r1
 3ce:	e4 cf       	rjmp	.-56     	; 0x398 <Send_string+0x10>
		   LCD_clear_screen();
		   gotoXY(1,0);
		   count = 0;
	    }
	}
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	08 95       	ret

000003da <main>:
#include "LCD.h"
#include "Keypad.h"


int main(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	c0 56       	subi	r28, 0x60	; 96
 3e4:	d1 09       	sbc	r29, r1
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
	
	
	
	Lcd_init();
 3f0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Lcd_init>
	Keypad_Init();
 3f4:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_Init>
 3f8:	83 ed       	ldi	r24, 0xD3	; 211
 3fa:	90 e3       	ldi	r25, 0x30	; 48
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x22>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
	long long num1,num2,product=0;
	float mul;
	unsigned char Number1[32];
	unsigned char Number2[32];
	unsigned char result[32];
	unsigned char flag=0;
 404:	00 e0       	ldi	r16, 0x00	; 0
	Lcd_init();
	Keypad_Init();
	_delay_ms(50);
	unsigned char key_pressed;
	uint8_t counter1=0;
	uint8_t counter2=0;
 406:	e1 2c       	mov	r14, r1
	
	Lcd_init();
	Keypad_Init();
	_delay_ms(50);
	unsigned char key_pressed;
	uint8_t counter1=0;
 408:	f1 2c       	mov	r15, r1
	unsigned char result[32];
	unsigned char flag=0;
	unsigned char opration;
	while(1){
		
		key_pressed = Keypad_Result();
 40a:	0e 94 4a 00 	call	0x94	; 0x94 <Keypad_Result>
 40e:	18 2f       	mov	r17, r24
		
		switch(key_pressed){
 410:	8f 33       	cpi	r24, 0x3F	; 63
 412:	19 f0       	breq	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 414:	81 34       	cpi	r24, 0x41	; 65
 416:	c9 f3       	breq	.-14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 418:	03 c0       	rjmp	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			case 'A':
			break;
			case '?':
			LCD_clear_screen();
 41a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_clear_screen>
			break;
 41e:	f5 cf       	rjmp	.-22     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			default:
			if(key_pressed=='+'||key_pressed=='-'||key_pressed=='*'||key_pressed=='/'){
 420:	8b 32       	cpi	r24, 0x2B	; 43
 422:	31 f0       	breq	.+12     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 424:	8d 32       	cpi	r24, 0x2D	; 45
 426:	21 f0       	breq	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 428:	8a 32       	cpi	r24, 0x2A	; 42
 42a:	11 f0       	breq	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	8f 32       	cpi	r24, 0x2F	; 47
 42e:	31 f4       	brne	.+12     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
				//printf("==================================================2\n");
				LCD_WRITE_CHAR(key_pressed);
 430:	81 2f       	mov	r24, r17
 432:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
				flag=1;
				opration=key_pressed;
 436:	91 2e       	mov	r9, r17
			break;
			default:
			if(key_pressed=='+'||key_pressed=='-'||key_pressed=='*'||key_pressed=='/'){
				//printf("==================================================2\n");
				LCD_WRITE_CHAR(key_pressed);
				flag=1;
 438:	01 e0       	ldi	r16, 0x01	; 1
				opration=key_pressed;
 43a:	e7 cf       	rjmp	.-50     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>

				}else if(key_pressed =='='){
 43c:	8d 33       	cpi	r24, 0x3D	; 61
 43e:	09 f0       	breq	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	dc c0       	rjmp	.+440    	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
				LCD_WRITE_CHAR(key_pressed);
 442:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
				Number1[counter1]='\0';
 446:	e1 e0       	ldi	r30, 0x01	; 1
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ec 0f       	add	r30, r28
 44c:	fd 1f       	adc	r31, r29
 44e:	ef 0d       	add	r30, r15
 450:	f1 1d       	adc	r31, r1
 452:	10 82       	st	Z, r1
				Number2[counter2]='\0';
 454:	e1 e2       	ldi	r30, 0x21	; 33
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	ec 0f       	add	r30, r28
 45a:	fd 1f       	adc	r31, r29
 45c:	ee 0d       	add	r30, r14
 45e:	f1 1d       	adc	r31, r1
 460:	10 82       	st	Z, r1
				num2=atoi(Number2);
 462:	ce 01       	movw	r24, r28
 464:	81 96       	adiw	r24, 0x21	; 33
 466:	0e 94 90 04 	call	0x920	; 0x920 <atoi>
 46a:	3c 01       	movw	r6, r24
 46c:	87 2c       	mov	r8, r7
 46e:	88 0c       	add	r8, r8
 470:	88 08       	sbc	r8, r8
				//printf(" num2= %d\n ",num2);
				//fflush(stdin);fflush(stdout);
				num1=atoi(Number1);
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	0e 94 90 04 	call	0x920	; 0x920 <atoi>
 47a:	fc 01       	movw	r30, r24
 47c:	1f 2f       	mov	r17, r31
 47e:	11 0f       	add	r17, r17
 480:	11 0b       	sbc	r17, r17
				//printf("num1 =%d\n ",num1);
				if(opration=='+'){
 482:	9b e2       	ldi	r25, 0x2B	; 43
 484:	99 12       	cpse	r9, r25
 486:	2a c0       	rjmp	.+84     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
					product=num1+num2;
 488:	26 2d       	mov	r18, r6
 48a:	37 2d       	mov	r19, r7
 48c:	48 2d       	mov	r20, r8
 48e:	58 2d       	mov	r21, r8
 490:	68 2d       	mov	r22, r8
 492:	78 2d       	mov	r23, r8
 494:	88 2d       	mov	r24, r8
 496:	98 2d       	mov	r25, r8
 498:	ae 2e       	mov	r10, r30
 49a:	bf 2e       	mov	r11, r31
 49c:	c1 2e       	mov	r12, r17
 49e:	d1 2e       	mov	r13, r17
 4a0:	e1 2e       	mov	r14, r17
 4a2:	f1 2e       	mov	r15, r17
 4a4:	01 2f       	mov	r16, r17
 4a6:	0e 94 6f 04 	call	0x8de	; 0x8de <__adddi3>
					sprintf(result, "%d", product);
 4aa:	9f 93       	push	r25
 4ac:	8f 93       	push	r24
 4ae:	7f 93       	push	r23
 4b0:	6f 93       	push	r22
 4b2:	5f 93       	push	r21
 4b4:	4f 93       	push	r20
 4b6:	3f 93       	push	r19
 4b8:	2f 93       	push	r18
 4ba:	80 e7       	ldi	r24, 0x70	; 112
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	9f 93       	push	r25
 4c0:	8f 93       	push	r24
 4c2:	ce 01       	movw	r24, r28
 4c4:	8f 5b       	subi	r24, 0xBF	; 191
 4c6:	9f 4f       	sbci	r25, 0xFF	; 255
 4c8:	9f 93       	push	r25
 4ca:	8f 93       	push	r24
 4cc:	0e 94 b6 04 	call	0x96c	; 0x96c <sprintf>
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	86 c0       	rjmp	.+268    	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
					}else if(opration=='-'){
 4dc:	9d e2       	ldi	r25, 0x2D	; 45
 4de:	99 12       	cpse	r9, r25
 4e0:	2b c0       	rjmp	.+86     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
					product=num1-num2;
 4e2:	2e 2f       	mov	r18, r30
 4e4:	3f 2f       	mov	r19, r31
 4e6:	41 2f       	mov	r20, r17
 4e8:	51 2f       	mov	r21, r17
 4ea:	61 2f       	mov	r22, r17
 4ec:	71 2f       	mov	r23, r17
 4ee:	81 2f       	mov	r24, r17
 4f0:	91 2f       	mov	r25, r17
 4f2:	a6 2c       	mov	r10, r6
 4f4:	b7 2c       	mov	r11, r7
 4f6:	c8 2c       	mov	r12, r8
 4f8:	d8 2c       	mov	r13, r8
 4fa:	e8 2c       	mov	r14, r8
 4fc:	f8 2c       	mov	r15, r8
 4fe:	08 2d       	mov	r16, r8
 500:	18 2d       	mov	r17, r8
 502:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__subdi3>
					sprintf(result, "%d", product);
 506:	9f 93       	push	r25
 508:	8f 93       	push	r24
 50a:	7f 93       	push	r23
 50c:	6f 93       	push	r22
 50e:	5f 93       	push	r21
 510:	4f 93       	push	r20
 512:	3f 93       	push	r19
 514:	2f 93       	push	r18
 516:	80 e7       	ldi	r24, 0x70	; 112
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	9f 93       	push	r25
 51c:	8f 93       	push	r24
 51e:	ce 01       	movw	r24, r28
 520:	8f 5b       	subi	r24, 0xBF	; 191
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	9f 93       	push	r25
 526:	8f 93       	push	r24
 528:	0e 94 b6 04 	call	0x96c	; 0x96c <sprintf>
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	58 c0       	rjmp	.+176    	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
					}else if(opration=='*'){
 538:	9a e2       	ldi	r25, 0x2A	; 42
 53a:	99 12       	cpse	r9, r25
 53c:	2a c0       	rjmp	.+84     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
					product=num1*num2;
 53e:	ae 2e       	mov	r10, r30
 540:	bf 2e       	mov	r11, r31
 542:	c1 2e       	mov	r12, r17
 544:	d1 2e       	mov	r13, r17
 546:	e1 2e       	mov	r14, r17
 548:	f1 2e       	mov	r15, r17
 54a:	01 2f       	mov	r16, r17
 54c:	26 2d       	mov	r18, r6
 54e:	37 2d       	mov	r19, r7
 550:	48 2d       	mov	r20, r8
 552:	58 2d       	mov	r21, r8
 554:	68 2d       	mov	r22, r8
 556:	78 2d       	mov	r23, r8
 558:	88 2d       	mov	r24, r8
 55a:	98 2d       	mov	r25, r8
 55c:	0e 94 16 04 	call	0x82c	; 0x82c <__muldi3>
					sprintf(result, "%d", product);
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	7f 93       	push	r23
 566:	6f 93       	push	r22
 568:	5f 93       	push	r21
 56a:	4f 93       	push	r20
 56c:	3f 93       	push	r19
 56e:	2f 93       	push	r18
 570:	80 e7       	ldi	r24, 0x70	; 112
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	9f 93       	push	r25
 576:	8f 93       	push	r24
 578:	ce 01       	movw	r24, r28
 57a:	8f 5b       	subi	r24, 0xBF	; 191
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	9f 93       	push	r25
 580:	8f 93       	push	r24
 582:	0e 94 b6 04 	call	0x96c	; 0x96c <sprintf>
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	2b c0       	rjmp	.+86     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>

					}else if(opration=='/'){
 592:	9f e2       	ldi	r25, 0x2F	; 47
 594:	99 12       	cpse	r9, r25
 596:	28 c0       	rjmp	.+80     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
                     mul=((float)num1/(float)num2);
 598:	bf 01       	movw	r22, r30
 59a:	ff 0f       	add	r31, r31
 59c:	88 0b       	sbc	r24, r24
 59e:	99 0b       	sbc	r25, r25
 5a0:	0e 94 8a 03 	call	0x714	; 0x714 <__floatsisf>
 5a4:	6b 01       	movw	r12, r22
 5a6:	7c 01       	movw	r14, r24
 5a8:	b3 01       	movw	r22, r6
 5aa:	77 0c       	add	r7, r7
 5ac:	88 0b       	sbc	r24, r24
 5ae:	99 0b       	sbc	r25, r25
 5b0:	0e 94 8a 03 	call	0x714	; 0x714 <__floatsisf>
 5b4:	9b 01       	movw	r18, r22
 5b6:	ac 01       	movw	r20, r24
 5b8:	c7 01       	movw	r24, r14
 5ba:	b6 01       	movw	r22, r12
 5bc:	0e 94 16 03 	call	0x62c	; 0x62c <__divsf3>
					sprintf(result, "%f", mul);
 5c0:	9f 93       	push	r25
 5c2:	8f 93       	push	r24
 5c4:	7f 93       	push	r23
 5c6:	6f 93       	push	r22
 5c8:	83 e7       	ldi	r24, 0x73	; 115
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	9f 93       	push	r25
 5ce:	8f 93       	push	r24
 5d0:	ce 01       	movw	r24, r28
 5d2:	8f 5b       	subi	r24, 0xBF	; 191
 5d4:	9f 4f       	sbci	r25, 0xFF	; 255
 5d6:	9f 93       	push	r25
 5d8:	8f 93       	push	r24
 5da:	0e 94 b6 04 	call	0x96c	; 0x96c <sprintf>
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
				}
				
				//printf("sum=%d\n",product);
				//printf("==============================================================\n");
				//sprintf(result, "%d", product);
				Send_string(result);
 5e8:	ce 01       	movw	r24, r28
 5ea:	8f 5b       	subi	r24, 0xBF	; 191
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	0e 94 c4 01 	call	0x388	; 0x388 <Send_string>
				 counter1=0;
				 counter2=0;
				 product=0;
				 flag=0;
 5f2:	00 e0       	ldi	r16, 0x00	; 0
				//printf("sum=%d\n",product);
				//printf("==============================================================\n");
				//sprintf(result, "%d", product);
				Send_string(result);
				 counter1=0;
				 counter2=0;
 5f4:	e1 2c       	mov	r14, r1
				
				//printf("sum=%d\n",product);
				//printf("==============================================================\n");
				//sprintf(result, "%d", product);
				Send_string(result);
				 counter1=0;
 5f6:	f1 2c       	mov	r15, r1
 5f8:	08 cf       	rjmp	.-496    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				//printf("The string is: %s\n", result);
				//printf("==============================================================\n");
				//break;

				}else{
				LCD_WRITE_CHAR(key_pressed);
 5fa:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_WRITE_CHAR>
				if(flag==0){
 5fe:	01 11       	cpse	r16, r1
 600:	09 c0       	rjmp	.+18     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
					Number1[counter1]=key_pressed;
 602:	e1 e0       	ldi	r30, 0x01	; 1
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	ec 0f       	add	r30, r28
 608:	fd 1f       	adc	r31, r29
 60a:	ef 0d       	add	r30, r15
 60c:	f1 1d       	adc	r31, r1
 60e:	10 83       	st	Z, r17
					counter1++;
 610:	f3 94       	inc	r15
 612:	fb ce       	rjmp	.-522    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				}else if(flag==1){
 614:	01 30       	cpi	r16, 0x01	; 1
 616:	09 f0       	breq	.+2      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 618:	f8 ce       	rjmp	.-528    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
					Number2[counter2]=key_pressed;
 61a:	e1 e2       	ldi	r30, 0x21	; 33
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	ec 0f       	add	r30, r28
 620:	fd 1f       	adc	r31, r29
 622:	ee 0d       	add	r30, r14
 624:	f1 1d       	adc	r31, r1
 626:	10 83       	st	Z, r17
					// printf("=====================   %c   ======= %d\n",Number2[counter2],counter2);
					counter2++;
 628:	e3 94       	inc	r14
 62a:	ef ce       	rjmp	.-546    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>

0000062c <__divsf3>:
 62c:	0e 94 2a 03 	call	0x654	; 0x654 <__divsf3x>
 630:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__fp_round>
 634:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fp_pscB>
 638:	58 f0       	brcs	.+22     	; 0x650 <__divsf3+0x24>
 63a:	0e 94 ce 03 	call	0x79c	; 0x79c <__fp_pscA>
 63e:	40 f0       	brcs	.+16     	; 0x650 <__divsf3+0x24>
 640:	29 f4       	brne	.+10     	; 0x64c <__divsf3+0x20>
 642:	5f 3f       	cpi	r21, 0xFF	; 255
 644:	29 f0       	breq	.+10     	; 0x650 <__divsf3+0x24>
 646:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_inf>
 64a:	51 11       	cpse	r21, r1
 64c:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_szero>
 650:	0c 94 cb 03 	jmp	0x796	; 0x796 <__fp_nan>

00000654 <__divsf3x>:
 654:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_split3>
 658:	68 f3       	brcs	.-38     	; 0x634 <__divsf3+0x8>

0000065a <__divsf3_pse>:
 65a:	99 23       	and	r25, r25
 65c:	b1 f3       	breq	.-20     	; 0x64a <__divsf3+0x1e>
 65e:	55 23       	and	r21, r21
 660:	91 f3       	breq	.-28     	; 0x646 <__divsf3+0x1a>
 662:	95 1b       	sub	r25, r21
 664:	55 0b       	sbc	r21, r21
 666:	bb 27       	eor	r27, r27
 668:	aa 27       	eor	r26, r26
 66a:	62 17       	cp	r22, r18
 66c:	73 07       	cpc	r23, r19
 66e:	84 07       	cpc	r24, r20
 670:	38 f0       	brcs	.+14     	; 0x680 <__divsf3_pse+0x26>
 672:	9f 5f       	subi	r25, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	44 1f       	adc	r20, r20
 67c:	aa 1f       	adc	r26, r26
 67e:	a9 f3       	breq	.-22     	; 0x66a <__divsf3_pse+0x10>
 680:	35 d0       	rcall	.+106    	; 0x6ec <__divsf3_pse+0x92>
 682:	0e 2e       	mov	r0, r30
 684:	3a f0       	brmi	.+14     	; 0x694 <__divsf3_pse+0x3a>
 686:	e0 e8       	ldi	r30, 0x80	; 128
 688:	32 d0       	rcall	.+100    	; 0x6ee <__divsf3_pse+0x94>
 68a:	91 50       	subi	r25, 0x01	; 1
 68c:	50 40       	sbci	r21, 0x00	; 0
 68e:	e6 95       	lsr	r30
 690:	00 1c       	adc	r0, r0
 692:	ca f7       	brpl	.-14     	; 0x686 <__divsf3_pse+0x2c>
 694:	2b d0       	rcall	.+86     	; 0x6ec <__divsf3_pse+0x92>
 696:	fe 2f       	mov	r31, r30
 698:	29 d0       	rcall	.+82     	; 0x6ec <__divsf3_pse+0x92>
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	bb 1f       	adc	r27, r27
 6a2:	26 17       	cp	r18, r22
 6a4:	37 07       	cpc	r19, r23
 6a6:	48 07       	cpc	r20, r24
 6a8:	ab 07       	cpc	r26, r27
 6aa:	b0 e8       	ldi	r27, 0x80	; 128
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__divsf3_pse+0x56>
 6ae:	bb 0b       	sbc	r27, r27
 6b0:	80 2d       	mov	r24, r0
 6b2:	bf 01       	movw	r22, r30
 6b4:	ff 27       	eor	r31, r31
 6b6:	93 58       	subi	r25, 0x83	; 131
 6b8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ba:	3a f0       	brmi	.+14     	; 0x6ca <__divsf3_pse+0x70>
 6bc:	9e 3f       	cpi	r25, 0xFE	; 254
 6be:	51 05       	cpc	r21, r1
 6c0:	78 f0       	brcs	.+30     	; 0x6e0 <__divsf3_pse+0x86>
 6c2:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_inf>
 6c6:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_szero>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	e4 f3       	brlt	.-8      	; 0x6c6 <__divsf3_pse+0x6c>
 6ce:	98 3e       	cpi	r25, 0xE8	; 232
 6d0:	d4 f3       	brlt	.-12     	; 0x6c6 <__divsf3_pse+0x6c>
 6d2:	86 95       	lsr	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b7 95       	ror	r27
 6da:	f7 95       	ror	r31
 6dc:	9f 5f       	subi	r25, 0xFF	; 255
 6de:	c9 f7       	brne	.-14     	; 0x6d2 <__divsf3_pse+0x78>
 6e0:	88 0f       	add	r24, r24
 6e2:	91 1d       	adc	r25, r1
 6e4:	96 95       	lsr	r25
 6e6:	87 95       	ror	r24
 6e8:	97 f9       	bld	r25, 7
 6ea:	08 95       	ret
 6ec:	e1 e0       	ldi	r30, 0x01	; 1
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	bb 1f       	adc	r27, r27
 6f6:	62 17       	cp	r22, r18
 6f8:	73 07       	cpc	r23, r19
 6fa:	84 07       	cpc	r24, r20
 6fc:	ba 07       	cpc	r27, r26
 6fe:	20 f0       	brcs	.+8      	; 0x708 <__divsf3_pse+0xae>
 700:	62 1b       	sub	r22, r18
 702:	73 0b       	sbc	r23, r19
 704:	84 0b       	sbc	r24, r20
 706:	ba 0b       	sbc	r27, r26
 708:	ee 1f       	adc	r30, r30
 70a:	88 f7       	brcc	.-30     	; 0x6ee <__divsf3_pse+0x94>
 70c:	e0 95       	com	r30
 70e:	08 95       	ret

00000710 <__floatunsisf>:
 710:	e8 94       	clt
 712:	09 c0       	rjmp	.+18     	; 0x726 <__floatsisf+0x12>

00000714 <__floatsisf>:
 714:	97 fb       	bst	r25, 7
 716:	3e f4       	brtc	.+14     	; 0x726 <__floatsisf+0x12>
 718:	90 95       	com	r25
 71a:	80 95       	com	r24
 71c:	70 95       	com	r23
 71e:	61 95       	neg	r22
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	99 23       	and	r25, r25
 728:	a9 f0       	breq	.+42     	; 0x754 <__floatsisf+0x40>
 72a:	f9 2f       	mov	r31, r25
 72c:	96 e9       	ldi	r25, 0x96	; 150
 72e:	bb 27       	eor	r27, r27
 730:	93 95       	inc	r25
 732:	f6 95       	lsr	r31
 734:	87 95       	ror	r24
 736:	77 95       	ror	r23
 738:	67 95       	ror	r22
 73a:	b7 95       	ror	r27
 73c:	f1 11       	cpse	r31, r1
 73e:	f8 cf       	rjmp	.-16     	; 0x730 <__floatsisf+0x1c>
 740:	fa f4       	brpl	.+62     	; 0x780 <__floatsisf+0x6c>
 742:	bb 0f       	add	r27, r27
 744:	11 f4       	brne	.+4      	; 0x74a <__floatsisf+0x36>
 746:	60 ff       	sbrs	r22, 0
 748:	1b c0       	rjmp	.+54     	; 0x780 <__floatsisf+0x6c>
 74a:	6f 5f       	subi	r22, 0xFF	; 255
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	16 c0       	rjmp	.+44     	; 0x780 <__floatsisf+0x6c>
 754:	88 23       	and	r24, r24
 756:	11 f0       	breq	.+4      	; 0x75c <__floatsisf+0x48>
 758:	96 e9       	ldi	r25, 0x96	; 150
 75a:	11 c0       	rjmp	.+34     	; 0x77e <__floatsisf+0x6a>
 75c:	77 23       	and	r23, r23
 75e:	21 f0       	breq	.+8      	; 0x768 <__floatsisf+0x54>
 760:	9e e8       	ldi	r25, 0x8E	; 142
 762:	87 2f       	mov	r24, r23
 764:	76 2f       	mov	r23, r22
 766:	05 c0       	rjmp	.+10     	; 0x772 <__floatsisf+0x5e>
 768:	66 23       	and	r22, r22
 76a:	71 f0       	breq	.+28     	; 0x788 <__floatsisf+0x74>
 76c:	96 e8       	ldi	r25, 0x86	; 134
 76e:	86 2f       	mov	r24, r22
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	2a f0       	brmi	.+10     	; 0x780 <__floatsisf+0x6c>
 776:	9a 95       	dec	r25
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	88 1f       	adc	r24, r24
 77e:	da f7       	brpl	.-10     	; 0x776 <__floatsisf+0x62>
 780:	88 0f       	add	r24, r24
 782:	96 95       	lsr	r25
 784:	87 95       	ror	r24
 786:	97 f9       	bld	r25, 7
 788:	08 95       	ret

0000078a <__fp_inf>:
 78a:	97 f9       	bld	r25, 7
 78c:	9f 67       	ori	r25, 0x7F	; 127
 78e:	80 e8       	ldi	r24, 0x80	; 128
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	08 95       	ret

00000796 <__fp_nan>:
 796:	9f ef       	ldi	r25, 0xFF	; 255
 798:	80 ec       	ldi	r24, 0xC0	; 192
 79a:	08 95       	ret

0000079c <__fp_pscA>:
 79c:	00 24       	eor	r0, r0
 79e:	0a 94       	dec	r0
 7a0:	16 16       	cp	r1, r22
 7a2:	17 06       	cpc	r1, r23
 7a4:	18 06       	cpc	r1, r24
 7a6:	09 06       	cpc	r0, r25
 7a8:	08 95       	ret

000007aa <__fp_pscB>:
 7aa:	00 24       	eor	r0, r0
 7ac:	0a 94       	dec	r0
 7ae:	12 16       	cp	r1, r18
 7b0:	13 06       	cpc	r1, r19
 7b2:	14 06       	cpc	r1, r20
 7b4:	05 06       	cpc	r0, r21
 7b6:	08 95       	ret

000007b8 <__fp_round>:
 7b8:	09 2e       	mov	r0, r25
 7ba:	03 94       	inc	r0
 7bc:	00 0c       	add	r0, r0
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__fp_round+0xc>
 7c0:	88 23       	and	r24, r24
 7c2:	52 f0       	brmi	.+20     	; 0x7d8 <__fp_round+0x20>
 7c4:	bb 0f       	add	r27, r27
 7c6:	40 f4       	brcc	.+16     	; 0x7d8 <__fp_round+0x20>
 7c8:	bf 2b       	or	r27, r31
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <__fp_round+0x18>
 7cc:	60 ff       	sbrs	r22, 0
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__fp_round+0x20>
 7d0:	6f 5f       	subi	r22, 0xFF	; 255
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	08 95       	ret

000007da <__fp_split3>:
 7da:	57 fd       	sbrc	r21, 7
 7dc:	90 58       	subi	r25, 0x80	; 128
 7de:	44 0f       	add	r20, r20
 7e0:	55 1f       	adc	r21, r21
 7e2:	59 f0       	breq	.+22     	; 0x7fa <__fp_splitA+0x10>
 7e4:	5f 3f       	cpi	r21, 0xFF	; 255
 7e6:	71 f0       	breq	.+28     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e8:	47 95       	ror	r20

000007ea <__fp_splitA>:
 7ea:	88 0f       	add	r24, r24
 7ec:	97 fb       	bst	r25, 7
 7ee:	99 1f       	adc	r25, r25
 7f0:	61 f0       	breq	.+24     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7f2:	9f 3f       	cpi	r25, 0xFF	; 255
 7f4:	79 f0       	breq	.+30     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 7f6:	87 95       	ror	r24
 7f8:	08 95       	ret
 7fa:	12 16       	cp	r1, r18
 7fc:	13 06       	cpc	r1, r19
 7fe:	14 06       	cpc	r1, r20
 800:	55 1f       	adc	r21, r21
 802:	f2 cf       	rjmp	.-28     	; 0x7e8 <__fp_split3+0xe>
 804:	46 95       	lsr	r20
 806:	f1 df       	rcall	.-30     	; 0x7ea <__fp_splitA>
 808:	08 c0       	rjmp	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80a:	16 16       	cp	r1, r22
 80c:	17 06       	cpc	r1, r23
 80e:	18 06       	cpc	r1, r24
 810:	99 1f       	adc	r25, r25
 812:	f1 cf       	rjmp	.-30     	; 0x7f6 <__fp_splitA+0xc>
 814:	86 95       	lsr	r24
 816:	71 05       	cpc	r23, r1
 818:	61 05       	cpc	r22, r1
 81a:	08 94       	sec
 81c:	08 95       	ret

0000081e <__fp_zero>:
 81e:	e8 94       	clt

00000820 <__fp_szero>:
 820:	bb 27       	eor	r27, r27
 822:	66 27       	eor	r22, r22
 824:	77 27       	eor	r23, r23
 826:	cb 01       	movw	r24, r22
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret

0000082c <__muldi3>:
 82c:	df 93       	push	r29
 82e:	cf 93       	push	r28
 830:	1f 93       	push	r17
 832:	0f 93       	push	r16
 834:	9a 9d       	mul	r25, r10
 836:	f0 2d       	mov	r31, r0
 838:	21 9f       	mul	r18, r17
 83a:	f0 0d       	add	r31, r0
 83c:	8b 9d       	mul	r24, r11
 83e:	f0 0d       	add	r31, r0
 840:	8a 9d       	mul	r24, r10
 842:	e0 2d       	mov	r30, r0
 844:	f1 0d       	add	r31, r1
 846:	03 9f       	mul	r16, r19
 848:	f0 0d       	add	r31, r0
 84a:	02 9f       	mul	r16, r18
 84c:	e0 0d       	add	r30, r0
 84e:	f1 1d       	adc	r31, r1
 850:	4e 9d       	mul	r20, r14
 852:	e0 0d       	add	r30, r0
 854:	f1 1d       	adc	r31, r1
 856:	5e 9d       	mul	r21, r14
 858:	f0 0d       	add	r31, r0
 85a:	4f 9d       	mul	r20, r15
 85c:	f0 0d       	add	r31, r0
 85e:	7f 93       	push	r23
 860:	6f 93       	push	r22
 862:	bf 92       	push	r11
 864:	af 92       	push	r10
 866:	5f 93       	push	r21
 868:	4f 93       	push	r20
 86a:	d5 01       	movw	r26, r10
 86c:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 870:	8b 01       	movw	r16, r22
 872:	ac 01       	movw	r20, r24
 874:	d7 01       	movw	r26, r14
 876:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 87a:	eb 01       	movw	r28, r22
 87c:	e8 0f       	add	r30, r24
 87e:	f9 1f       	adc	r31, r25
 880:	d6 01       	movw	r26, r12
 882:	0e 94 66 04 	call	0x8cc	; 0x8cc <__muldi3_6>
 886:	2f 91       	pop	r18
 888:	3f 91       	pop	r19
 88a:	d6 01       	movw	r26, r12
 88c:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 890:	c6 0f       	add	r28, r22
 892:	d7 1f       	adc	r29, r23
 894:	e8 1f       	adc	r30, r24
 896:	f9 1f       	adc	r31, r25
 898:	af 91       	pop	r26
 89a:	bf 91       	pop	r27
 89c:	0e 94 66 04 	call	0x8cc	; 0x8cc <__muldi3_6>
 8a0:	2f 91       	pop	r18
 8a2:	3f 91       	pop	r19
 8a4:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 8a8:	c6 0f       	add	r28, r22
 8aa:	d7 1f       	adc	r29, r23
 8ac:	e8 1f       	adc	r30, r24
 8ae:	f9 1f       	adc	r31, r25
 8b0:	d6 01       	movw	r26, r12
 8b2:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 8b6:	e6 0f       	add	r30, r22
 8b8:	f7 1f       	adc	r31, r23
 8ba:	98 01       	movw	r18, r16
 8bc:	be 01       	movw	r22, r28
 8be:	cf 01       	movw	r24, r30
 8c0:	11 24       	eor	r1, r1
 8c2:	0f 91       	pop	r16
 8c4:	1f 91       	pop	r17
 8c6:	cf 91       	pop	r28
 8c8:	df 91       	pop	r29
 8ca:	08 95       	ret

000008cc <__muldi3_6>:
 8cc:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 8d0:	46 0f       	add	r20, r22
 8d2:	57 1f       	adc	r21, r23
 8d4:	c8 1f       	adc	r28, r24
 8d6:	d9 1f       	adc	r29, r25
 8d8:	08 f4       	brcc	.+2      	; 0x8dc <__muldi3_6+0x10>
 8da:	31 96       	adiw	r30, 0x01	; 1
 8dc:	08 95       	ret

000008de <__adddi3>:
 8de:	2a 0d       	add	r18, r10
 8e0:	3b 1d       	adc	r19, r11
 8e2:	4c 1d       	adc	r20, r12
 8e4:	5d 1d       	adc	r21, r13
 8e6:	6e 1d       	adc	r22, r14
 8e8:	7f 1d       	adc	r23, r15
 8ea:	80 1f       	adc	r24, r16
 8ec:	91 1f       	adc	r25, r17
 8ee:	08 95       	ret

000008f0 <__subdi3>:
 8f0:	2a 19       	sub	r18, r10
 8f2:	3b 09       	sbc	r19, r11
 8f4:	4c 09       	sbc	r20, r12
 8f6:	5d 09       	sbc	r21, r13
 8f8:	6e 09       	sbc	r22, r14
 8fa:	7f 09       	sbc	r23, r15
 8fc:	80 0b       	sbc	r24, r16
 8fe:	91 0b       	sbc	r25, r17
 900:	08 95       	ret

00000902 <__umulhisi3>:
 902:	a2 9f       	mul	r26, r18
 904:	b0 01       	movw	r22, r0
 906:	b3 9f       	mul	r27, r19
 908:	c0 01       	movw	r24, r0
 90a:	a3 9f       	mul	r26, r19
 90c:	70 0d       	add	r23, r0
 90e:	81 1d       	adc	r24, r1
 910:	11 24       	eor	r1, r1
 912:	91 1d       	adc	r25, r1
 914:	b2 9f       	mul	r27, r18
 916:	70 0d       	add	r23, r0
 918:	81 1d       	adc	r24, r1
 91a:	11 24       	eor	r1, r1
 91c:	91 1d       	adc	r25, r1
 91e:	08 95       	ret

00000920 <atoi>:
 920:	fc 01       	movw	r30, r24
 922:	88 27       	eor	r24, r24
 924:	99 27       	eor	r25, r25
 926:	e8 94       	clt
 928:	21 91       	ld	r18, Z+
 92a:	20 32       	cpi	r18, 0x20	; 32
 92c:	e9 f3       	breq	.-6      	; 0x928 <atoi+0x8>
 92e:	29 30       	cpi	r18, 0x09	; 9
 930:	10 f0       	brcs	.+4      	; 0x936 <atoi+0x16>
 932:	2e 30       	cpi	r18, 0x0E	; 14
 934:	c8 f3       	brcs	.-14     	; 0x928 <atoi+0x8>
 936:	2b 32       	cpi	r18, 0x2B	; 43
 938:	41 f0       	breq	.+16     	; 0x94a <atoi+0x2a>
 93a:	2d 32       	cpi	r18, 0x2D	; 45
 93c:	39 f4       	brne	.+14     	; 0x94c <atoi+0x2c>
 93e:	68 94       	set
 940:	04 c0       	rjmp	.+8      	; 0x94a <atoi+0x2a>
 942:	0e 94 ae 04 	call	0x95c	; 0x95c <__mulhi_const_10>
 946:	82 0f       	add	r24, r18
 948:	91 1d       	adc	r25, r1
 94a:	21 91       	ld	r18, Z+
 94c:	20 53       	subi	r18, 0x30	; 48
 94e:	2a 30       	cpi	r18, 0x0A	; 10
 950:	c0 f3       	brcs	.-16     	; 0x942 <atoi+0x22>
 952:	1e f4       	brtc	.+6      	; 0x95a <atoi+0x3a>
 954:	90 95       	com	r25
 956:	81 95       	neg	r24
 958:	9f 4f       	sbci	r25, 0xFF	; 255
 95a:	08 95       	ret

0000095c <__mulhi_const_10>:
 95c:	7a e0       	ldi	r23, 0x0A	; 10
 95e:	97 9f       	mul	r25, r23
 960:	90 2d       	mov	r25, r0
 962:	87 9f       	mul	r24, r23
 964:	80 2d       	mov	r24, r0
 966:	91 0d       	add	r25, r1
 968:	11 24       	eor	r1, r1
 96a:	08 95       	ret

0000096c <sprintf>:
 96c:	ae e0       	ldi	r26, 0x0E	; 14
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	ec eb       	ldi	r30, 0xBC	; 188
 972:	f4 e0       	ldi	r31, 0x04	; 4
 974:	0c 94 77 07 	jmp	0xeee	; 0xeee <__prologue_saves__+0x1c>
 978:	0d 89       	ldd	r16, Y+21	; 0x15
 97a:	1e 89       	ldd	r17, Y+22	; 0x16
 97c:	86 e0       	ldi	r24, 0x06	; 6
 97e:	8c 83       	std	Y+4, r24	; 0x04
 980:	1a 83       	std	Y+2, r17	; 0x02
 982:	09 83       	std	Y+1, r16	; 0x01
 984:	8f ef       	ldi	r24, 0xFF	; 255
 986:	9f e7       	ldi	r25, 0x7F	; 127
 988:	9e 83       	std	Y+6, r25	; 0x06
 98a:	8d 83       	std	Y+5, r24	; 0x05
 98c:	ae 01       	movw	r20, r28
 98e:	47 5e       	subi	r20, 0xE7	; 231
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	6f 89       	ldd	r22, Y+23	; 0x17
 994:	78 8d       	ldd	r23, Y+24	; 0x18
 996:	ce 01       	movw	r24, r28
 998:	01 96       	adiw	r24, 0x01	; 1
 99a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <vfprintf>
 99e:	ef 81       	ldd	r30, Y+7	; 0x07
 9a0:	f8 85       	ldd	r31, Y+8	; 0x08
 9a2:	e0 0f       	add	r30, r16
 9a4:	f1 1f       	adc	r31, r17
 9a6:	10 82       	st	Z, r1
 9a8:	2e 96       	adiw	r28, 0x0e	; 14
 9aa:	e4 e0       	ldi	r30, 0x04	; 4
 9ac:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__epilogue_restores__+0x1c>

000009b0 <vfprintf>:
 9b0:	ab e0       	ldi	r26, 0x0B	; 11
 9b2:	b0 e0       	ldi	r27, 0x00	; 0
 9b4:	ee ed       	ldi	r30, 0xDE	; 222
 9b6:	f4 e0       	ldi	r31, 0x04	; 4
 9b8:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__prologue_saves__>
 9bc:	6c 01       	movw	r12, r24
 9be:	7b 01       	movw	r14, r22
 9c0:	8a 01       	movw	r16, r20
 9c2:	fc 01       	movw	r30, r24
 9c4:	17 82       	std	Z+7, r1	; 0x07
 9c6:	16 82       	std	Z+6, r1	; 0x06
 9c8:	83 81       	ldd	r24, Z+3	; 0x03
 9ca:	81 ff       	sbrs	r24, 1
 9cc:	cc c1       	rjmp	.+920    	; 0xd66 <vfprintf+0x3b6>
 9ce:	ce 01       	movw	r24, r28
 9d0:	01 96       	adiw	r24, 0x01	; 1
 9d2:	3c 01       	movw	r6, r24
 9d4:	f6 01       	movw	r30, r12
 9d6:	93 81       	ldd	r25, Z+3	; 0x03
 9d8:	f7 01       	movw	r30, r14
 9da:	93 fd       	sbrc	r25, 3
 9dc:	85 91       	lpm	r24, Z+
 9de:	93 ff       	sbrs	r25, 3
 9e0:	81 91       	ld	r24, Z+
 9e2:	7f 01       	movw	r14, r30
 9e4:	88 23       	and	r24, r24
 9e6:	09 f4       	brne	.+2      	; 0x9ea <vfprintf+0x3a>
 9e8:	ba c1       	rjmp	.+884    	; 0xd5e <vfprintf+0x3ae>
 9ea:	85 32       	cpi	r24, 0x25	; 37
 9ec:	39 f4       	brne	.+14     	; 0x9fc <vfprintf+0x4c>
 9ee:	93 fd       	sbrc	r25, 3
 9f0:	85 91       	lpm	r24, Z+
 9f2:	93 ff       	sbrs	r25, 3
 9f4:	81 91       	ld	r24, Z+
 9f6:	7f 01       	movw	r14, r30
 9f8:	85 32       	cpi	r24, 0x25	; 37
 9fa:	29 f4       	brne	.+10     	; 0xa06 <vfprintf+0x56>
 9fc:	b6 01       	movw	r22, r12
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 a04:	e7 cf       	rjmp	.-50     	; 0x9d4 <vfprintf+0x24>
 a06:	91 2c       	mov	r9, r1
 a08:	21 2c       	mov	r2, r1
 a0a:	31 2c       	mov	r3, r1
 a0c:	ff e1       	ldi	r31, 0x1F	; 31
 a0e:	f3 15       	cp	r31, r3
 a10:	d8 f0       	brcs	.+54     	; 0xa48 <vfprintf+0x98>
 a12:	8b 32       	cpi	r24, 0x2B	; 43
 a14:	79 f0       	breq	.+30     	; 0xa34 <vfprintf+0x84>
 a16:	38 f4       	brcc	.+14     	; 0xa26 <vfprintf+0x76>
 a18:	80 32       	cpi	r24, 0x20	; 32
 a1a:	79 f0       	breq	.+30     	; 0xa3a <vfprintf+0x8a>
 a1c:	83 32       	cpi	r24, 0x23	; 35
 a1e:	a1 f4       	brne	.+40     	; 0xa48 <vfprintf+0x98>
 a20:	23 2d       	mov	r18, r3
 a22:	20 61       	ori	r18, 0x10	; 16
 a24:	1d c0       	rjmp	.+58     	; 0xa60 <vfprintf+0xb0>
 a26:	8d 32       	cpi	r24, 0x2D	; 45
 a28:	61 f0       	breq	.+24     	; 0xa42 <vfprintf+0x92>
 a2a:	80 33       	cpi	r24, 0x30	; 48
 a2c:	69 f4       	brne	.+26     	; 0xa48 <vfprintf+0x98>
 a2e:	23 2d       	mov	r18, r3
 a30:	21 60       	ori	r18, 0x01	; 1
 a32:	16 c0       	rjmp	.+44     	; 0xa60 <vfprintf+0xb0>
 a34:	83 2d       	mov	r24, r3
 a36:	82 60       	ori	r24, 0x02	; 2
 a38:	38 2e       	mov	r3, r24
 a3a:	e3 2d       	mov	r30, r3
 a3c:	e4 60       	ori	r30, 0x04	; 4
 a3e:	3e 2e       	mov	r3, r30
 a40:	2a c0       	rjmp	.+84     	; 0xa96 <vfprintf+0xe6>
 a42:	f3 2d       	mov	r31, r3
 a44:	f8 60       	ori	r31, 0x08	; 8
 a46:	1d c0       	rjmp	.+58     	; 0xa82 <vfprintf+0xd2>
 a48:	37 fc       	sbrc	r3, 7
 a4a:	2d c0       	rjmp	.+90     	; 0xaa6 <vfprintf+0xf6>
 a4c:	20 ed       	ldi	r18, 0xD0	; 208
 a4e:	28 0f       	add	r18, r24
 a50:	2a 30       	cpi	r18, 0x0A	; 10
 a52:	40 f0       	brcs	.+16     	; 0xa64 <vfprintf+0xb4>
 a54:	8e 32       	cpi	r24, 0x2E	; 46
 a56:	b9 f4       	brne	.+46     	; 0xa86 <vfprintf+0xd6>
 a58:	36 fc       	sbrc	r3, 6
 a5a:	81 c1       	rjmp	.+770    	; 0xd5e <vfprintf+0x3ae>
 a5c:	23 2d       	mov	r18, r3
 a5e:	20 64       	ori	r18, 0x40	; 64
 a60:	32 2e       	mov	r3, r18
 a62:	19 c0       	rjmp	.+50     	; 0xa96 <vfprintf+0xe6>
 a64:	36 fe       	sbrs	r3, 6
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0xc4>
 a68:	8a e0       	ldi	r24, 0x0A	; 10
 a6a:	98 9e       	mul	r9, r24
 a6c:	20 0d       	add	r18, r0
 a6e:	11 24       	eor	r1, r1
 a70:	92 2e       	mov	r9, r18
 a72:	11 c0       	rjmp	.+34     	; 0xa96 <vfprintf+0xe6>
 a74:	ea e0       	ldi	r30, 0x0A	; 10
 a76:	2e 9e       	mul	r2, r30
 a78:	20 0d       	add	r18, r0
 a7a:	11 24       	eor	r1, r1
 a7c:	22 2e       	mov	r2, r18
 a7e:	f3 2d       	mov	r31, r3
 a80:	f0 62       	ori	r31, 0x20	; 32
 a82:	3f 2e       	mov	r3, r31
 a84:	08 c0       	rjmp	.+16     	; 0xa96 <vfprintf+0xe6>
 a86:	8c 36       	cpi	r24, 0x6C	; 108
 a88:	21 f4       	brne	.+8      	; 0xa92 <vfprintf+0xe2>
 a8a:	83 2d       	mov	r24, r3
 a8c:	80 68       	ori	r24, 0x80	; 128
 a8e:	38 2e       	mov	r3, r24
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <vfprintf+0xe6>
 a92:	88 36       	cpi	r24, 0x68	; 104
 a94:	41 f4       	brne	.+16     	; 0xaa6 <vfprintf+0xf6>
 a96:	f7 01       	movw	r30, r14
 a98:	93 fd       	sbrc	r25, 3
 a9a:	85 91       	lpm	r24, Z+
 a9c:	93 ff       	sbrs	r25, 3
 a9e:	81 91       	ld	r24, Z+
 aa0:	7f 01       	movw	r14, r30
 aa2:	81 11       	cpse	r24, r1
 aa4:	b3 cf       	rjmp	.-154    	; 0xa0c <vfprintf+0x5c>
 aa6:	98 2f       	mov	r25, r24
 aa8:	9f 7d       	andi	r25, 0xDF	; 223
 aaa:	95 54       	subi	r25, 0x45	; 69
 aac:	93 30       	cpi	r25, 0x03	; 3
 aae:	28 f4       	brcc	.+10     	; 0xaba <vfprintf+0x10a>
 ab0:	0c 5f       	subi	r16, 0xFC	; 252
 ab2:	1f 4f       	sbci	r17, 0xFF	; 255
 ab4:	9f e3       	ldi	r25, 0x3F	; 63
 ab6:	99 83       	std	Y+1, r25	; 0x01
 ab8:	0d c0       	rjmp	.+26     	; 0xad4 <vfprintf+0x124>
 aba:	83 36       	cpi	r24, 0x63	; 99
 abc:	31 f0       	breq	.+12     	; 0xaca <vfprintf+0x11a>
 abe:	83 37       	cpi	r24, 0x73	; 115
 ac0:	71 f0       	breq	.+28     	; 0xade <vfprintf+0x12e>
 ac2:	83 35       	cpi	r24, 0x53	; 83
 ac4:	09 f0       	breq	.+2      	; 0xac8 <vfprintf+0x118>
 ac6:	59 c0       	rjmp	.+178    	; 0xb7a <vfprintf+0x1ca>
 ac8:	21 c0       	rjmp	.+66     	; 0xb0c <vfprintf+0x15c>
 aca:	f8 01       	movw	r30, r16
 acc:	80 81       	ld	r24, Z
 ace:	89 83       	std	Y+1, r24	; 0x01
 ad0:	0e 5f       	subi	r16, 0xFE	; 254
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	88 24       	eor	r8, r8
 ad6:	83 94       	inc	r8
 ad8:	91 2c       	mov	r9, r1
 ada:	53 01       	movw	r10, r6
 adc:	13 c0       	rjmp	.+38     	; 0xb04 <vfprintf+0x154>
 ade:	28 01       	movw	r4, r16
 ae0:	f2 e0       	ldi	r31, 0x02	; 2
 ae2:	4f 0e       	add	r4, r31
 ae4:	51 1c       	adc	r5, r1
 ae6:	f8 01       	movw	r30, r16
 ae8:	a0 80       	ld	r10, Z
 aea:	b1 80       	ldd	r11, Z+1	; 0x01
 aec:	36 fe       	sbrs	r3, 6
 aee:	03 c0       	rjmp	.+6      	; 0xaf6 <vfprintf+0x146>
 af0:	69 2d       	mov	r22, r9
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	02 c0       	rjmp	.+4      	; 0xafa <vfprintf+0x14a>
 af6:	6f ef       	ldi	r22, 0xFF	; 255
 af8:	7f ef       	ldi	r23, 0xFF	; 255
 afa:	c5 01       	movw	r24, r10
 afc:	0e 94 c4 06 	call	0xd88	; 0xd88 <strnlen>
 b00:	4c 01       	movw	r8, r24
 b02:	82 01       	movw	r16, r4
 b04:	f3 2d       	mov	r31, r3
 b06:	ff 77       	andi	r31, 0x7F	; 127
 b08:	3f 2e       	mov	r3, r31
 b0a:	16 c0       	rjmp	.+44     	; 0xb38 <vfprintf+0x188>
 b0c:	28 01       	movw	r4, r16
 b0e:	22 e0       	ldi	r18, 0x02	; 2
 b10:	42 0e       	add	r4, r18
 b12:	51 1c       	adc	r5, r1
 b14:	f8 01       	movw	r30, r16
 b16:	a0 80       	ld	r10, Z
 b18:	b1 80       	ldd	r11, Z+1	; 0x01
 b1a:	36 fe       	sbrs	r3, 6
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <vfprintf+0x174>
 b1e:	69 2d       	mov	r22, r9
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <vfprintf+0x178>
 b24:	6f ef       	ldi	r22, 0xFF	; 255
 b26:	7f ef       	ldi	r23, 0xFF	; 255
 b28:	c5 01       	movw	r24, r10
 b2a:	0e 94 b9 06 	call	0xd72	; 0xd72 <strnlen_P>
 b2e:	4c 01       	movw	r8, r24
 b30:	f3 2d       	mov	r31, r3
 b32:	f0 68       	ori	r31, 0x80	; 128
 b34:	3f 2e       	mov	r3, r31
 b36:	82 01       	movw	r16, r4
 b38:	33 fc       	sbrc	r3, 3
 b3a:	1b c0       	rjmp	.+54     	; 0xb72 <vfprintf+0x1c2>
 b3c:	82 2d       	mov	r24, r2
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	88 16       	cp	r8, r24
 b42:	99 06       	cpc	r9, r25
 b44:	b0 f4       	brcc	.+44     	; 0xb72 <vfprintf+0x1c2>
 b46:	b6 01       	movw	r22, r12
 b48:	80 e2       	ldi	r24, 0x20	; 32
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 b50:	2a 94       	dec	r2
 b52:	f4 cf       	rjmp	.-24     	; 0xb3c <vfprintf+0x18c>
 b54:	f5 01       	movw	r30, r10
 b56:	37 fc       	sbrc	r3, 7
 b58:	85 91       	lpm	r24, Z+
 b5a:	37 fe       	sbrs	r3, 7
 b5c:	81 91       	ld	r24, Z+
 b5e:	5f 01       	movw	r10, r30
 b60:	b6 01       	movw	r22, r12
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 b68:	21 10       	cpse	r2, r1
 b6a:	2a 94       	dec	r2
 b6c:	21 e0       	ldi	r18, 0x01	; 1
 b6e:	82 1a       	sub	r8, r18
 b70:	91 08       	sbc	r9, r1
 b72:	81 14       	cp	r8, r1
 b74:	91 04       	cpc	r9, r1
 b76:	71 f7       	brne	.-36     	; 0xb54 <vfprintf+0x1a4>
 b78:	e8 c0       	rjmp	.+464    	; 0xd4a <vfprintf+0x39a>
 b7a:	84 36       	cpi	r24, 0x64	; 100
 b7c:	11 f0       	breq	.+4      	; 0xb82 <vfprintf+0x1d2>
 b7e:	89 36       	cpi	r24, 0x69	; 105
 b80:	41 f5       	brne	.+80     	; 0xbd2 <vfprintf+0x222>
 b82:	f8 01       	movw	r30, r16
 b84:	37 fe       	sbrs	r3, 7
 b86:	07 c0       	rjmp	.+14     	; 0xb96 <vfprintf+0x1e6>
 b88:	60 81       	ld	r22, Z
 b8a:	71 81       	ldd	r23, Z+1	; 0x01
 b8c:	82 81       	ldd	r24, Z+2	; 0x02
 b8e:	93 81       	ldd	r25, Z+3	; 0x03
 b90:	0c 5f       	subi	r16, 0xFC	; 252
 b92:	1f 4f       	sbci	r17, 0xFF	; 255
 b94:	08 c0       	rjmp	.+16     	; 0xba6 <vfprintf+0x1f6>
 b96:	60 81       	ld	r22, Z
 b98:	71 81       	ldd	r23, Z+1	; 0x01
 b9a:	07 2e       	mov	r0, r23
 b9c:	00 0c       	add	r0, r0
 b9e:	88 0b       	sbc	r24, r24
 ba0:	99 0b       	sbc	r25, r25
 ba2:	0e 5f       	subi	r16, 0xFE	; 254
 ba4:	1f 4f       	sbci	r17, 0xFF	; 255
 ba6:	f3 2d       	mov	r31, r3
 ba8:	ff 76       	andi	r31, 0x6F	; 111
 baa:	3f 2e       	mov	r3, r31
 bac:	97 ff       	sbrs	r25, 7
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <vfprintf+0x212>
 bb0:	90 95       	com	r25
 bb2:	80 95       	com	r24
 bb4:	70 95       	com	r23
 bb6:	61 95       	neg	r22
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255
 bba:	8f 4f       	sbci	r24, 0xFF	; 255
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	f0 68       	ori	r31, 0x80	; 128
 bc0:	3f 2e       	mov	r3, r31
 bc2:	2a e0       	ldi	r18, 0x0A	; 10
 bc4:	30 e0       	ldi	r19, 0x00	; 0
 bc6:	a3 01       	movw	r20, r6
 bc8:	0e 94 0b 07 	call	0xe16	; 0xe16 <__ultoa_invert>
 bcc:	88 2e       	mov	r8, r24
 bce:	86 18       	sub	r8, r6
 bd0:	45 c0       	rjmp	.+138    	; 0xc5c <vfprintf+0x2ac>
 bd2:	85 37       	cpi	r24, 0x75	; 117
 bd4:	31 f4       	brne	.+12     	; 0xbe2 <vfprintf+0x232>
 bd6:	23 2d       	mov	r18, r3
 bd8:	2f 7e       	andi	r18, 0xEF	; 239
 bda:	b2 2e       	mov	r11, r18
 bdc:	2a e0       	ldi	r18, 0x0A	; 10
 bde:	30 e0       	ldi	r19, 0x00	; 0
 be0:	25 c0       	rjmp	.+74     	; 0xc2c <vfprintf+0x27c>
 be2:	93 2d       	mov	r25, r3
 be4:	99 7f       	andi	r25, 0xF9	; 249
 be6:	b9 2e       	mov	r11, r25
 be8:	8f 36       	cpi	r24, 0x6F	; 111
 bea:	c1 f0       	breq	.+48     	; 0xc1c <vfprintf+0x26c>
 bec:	18 f4       	brcc	.+6      	; 0xbf4 <vfprintf+0x244>
 bee:	88 35       	cpi	r24, 0x58	; 88
 bf0:	79 f0       	breq	.+30     	; 0xc10 <vfprintf+0x260>
 bf2:	b5 c0       	rjmp	.+362    	; 0xd5e <vfprintf+0x3ae>
 bf4:	80 37       	cpi	r24, 0x70	; 112
 bf6:	19 f0       	breq	.+6      	; 0xbfe <vfprintf+0x24e>
 bf8:	88 37       	cpi	r24, 0x78	; 120
 bfa:	21 f0       	breq	.+8      	; 0xc04 <vfprintf+0x254>
 bfc:	b0 c0       	rjmp	.+352    	; 0xd5e <vfprintf+0x3ae>
 bfe:	e9 2f       	mov	r30, r25
 c00:	e0 61       	ori	r30, 0x10	; 16
 c02:	be 2e       	mov	r11, r30
 c04:	b4 fe       	sbrs	r11, 4
 c06:	0d c0       	rjmp	.+26     	; 0xc22 <vfprintf+0x272>
 c08:	fb 2d       	mov	r31, r11
 c0a:	f4 60       	ori	r31, 0x04	; 4
 c0c:	bf 2e       	mov	r11, r31
 c0e:	09 c0       	rjmp	.+18     	; 0xc22 <vfprintf+0x272>
 c10:	34 fe       	sbrs	r3, 4
 c12:	0a c0       	rjmp	.+20     	; 0xc28 <vfprintf+0x278>
 c14:	29 2f       	mov	r18, r25
 c16:	26 60       	ori	r18, 0x06	; 6
 c18:	b2 2e       	mov	r11, r18
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0x278>
 c1c:	28 e0       	ldi	r18, 0x08	; 8
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	05 c0       	rjmp	.+10     	; 0xc2c <vfprintf+0x27c>
 c22:	20 e1       	ldi	r18, 0x10	; 16
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <vfprintf+0x27c>
 c28:	20 e1       	ldi	r18, 0x10	; 16
 c2a:	32 e0       	ldi	r19, 0x02	; 2
 c2c:	f8 01       	movw	r30, r16
 c2e:	b7 fe       	sbrs	r11, 7
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <vfprintf+0x290>
 c32:	60 81       	ld	r22, Z
 c34:	71 81       	ldd	r23, Z+1	; 0x01
 c36:	82 81       	ldd	r24, Z+2	; 0x02
 c38:	93 81       	ldd	r25, Z+3	; 0x03
 c3a:	0c 5f       	subi	r16, 0xFC	; 252
 c3c:	1f 4f       	sbci	r17, 0xFF	; 255
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x29c>
 c40:	60 81       	ld	r22, Z
 c42:	71 81       	ldd	r23, Z+1	; 0x01
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	0e 5f       	subi	r16, 0xFE	; 254
 c4a:	1f 4f       	sbci	r17, 0xFF	; 255
 c4c:	a3 01       	movw	r20, r6
 c4e:	0e 94 0b 07 	call	0xe16	; 0xe16 <__ultoa_invert>
 c52:	88 2e       	mov	r8, r24
 c54:	86 18       	sub	r8, r6
 c56:	fb 2d       	mov	r31, r11
 c58:	ff 77       	andi	r31, 0x7F	; 127
 c5a:	3f 2e       	mov	r3, r31
 c5c:	36 fe       	sbrs	r3, 6
 c5e:	0d c0       	rjmp	.+26     	; 0xc7a <vfprintf+0x2ca>
 c60:	23 2d       	mov	r18, r3
 c62:	2e 7f       	andi	r18, 0xFE	; 254
 c64:	a2 2e       	mov	r10, r18
 c66:	89 14       	cp	r8, r9
 c68:	58 f4       	brcc	.+22     	; 0xc80 <vfprintf+0x2d0>
 c6a:	34 fe       	sbrs	r3, 4
 c6c:	0b c0       	rjmp	.+22     	; 0xc84 <vfprintf+0x2d4>
 c6e:	32 fc       	sbrc	r3, 2
 c70:	09 c0       	rjmp	.+18     	; 0xc84 <vfprintf+0x2d4>
 c72:	83 2d       	mov	r24, r3
 c74:	8e 7e       	andi	r24, 0xEE	; 238
 c76:	a8 2e       	mov	r10, r24
 c78:	05 c0       	rjmp	.+10     	; 0xc84 <vfprintf+0x2d4>
 c7a:	b8 2c       	mov	r11, r8
 c7c:	a3 2c       	mov	r10, r3
 c7e:	03 c0       	rjmp	.+6      	; 0xc86 <vfprintf+0x2d6>
 c80:	b8 2c       	mov	r11, r8
 c82:	01 c0       	rjmp	.+2      	; 0xc86 <vfprintf+0x2d6>
 c84:	b9 2c       	mov	r11, r9
 c86:	a4 fe       	sbrs	r10, 4
 c88:	0f c0       	rjmp	.+30     	; 0xca8 <vfprintf+0x2f8>
 c8a:	fe 01       	movw	r30, r28
 c8c:	e8 0d       	add	r30, r8
 c8e:	f1 1d       	adc	r31, r1
 c90:	80 81       	ld	r24, Z
 c92:	80 33       	cpi	r24, 0x30	; 48
 c94:	21 f4       	brne	.+8      	; 0xc9e <vfprintf+0x2ee>
 c96:	9a 2d       	mov	r25, r10
 c98:	99 7e       	andi	r25, 0xE9	; 233
 c9a:	a9 2e       	mov	r10, r25
 c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <vfprintf+0x300>
 c9e:	a2 fe       	sbrs	r10, 2
 ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x2fe>
 ca2:	b3 94       	inc	r11
 ca4:	b3 94       	inc	r11
 ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <vfprintf+0x300>
 ca8:	8a 2d       	mov	r24, r10
 caa:	86 78       	andi	r24, 0x86	; 134
 cac:	09 f0       	breq	.+2      	; 0xcb0 <vfprintf+0x300>
 cae:	b3 94       	inc	r11
 cb0:	a3 fc       	sbrc	r10, 3
 cb2:	11 c0       	rjmp	.+34     	; 0xcd6 <vfprintf+0x326>
 cb4:	a0 fe       	sbrs	r10, 0
 cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <vfprintf+0x314>
 cb8:	b2 14       	cp	r11, r2
 cba:	88 f4       	brcc	.+34     	; 0xcde <vfprintf+0x32e>
 cbc:	28 0c       	add	r2, r8
 cbe:	92 2c       	mov	r9, r2
 cc0:	9b 18       	sub	r9, r11
 cc2:	0e c0       	rjmp	.+28     	; 0xce0 <vfprintf+0x330>
 cc4:	b2 14       	cp	r11, r2
 cc6:	60 f4       	brcc	.+24     	; 0xce0 <vfprintf+0x330>
 cc8:	b6 01       	movw	r22, r12
 cca:	80 e2       	ldi	r24, 0x20	; 32
 ccc:	90 e0       	ldi	r25, 0x00	; 0
 cce:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 cd2:	b3 94       	inc	r11
 cd4:	f7 cf       	rjmp	.-18     	; 0xcc4 <vfprintf+0x314>
 cd6:	b2 14       	cp	r11, r2
 cd8:	18 f4       	brcc	.+6      	; 0xce0 <vfprintf+0x330>
 cda:	2b 18       	sub	r2, r11
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x332>
 cde:	98 2c       	mov	r9, r8
 ce0:	21 2c       	mov	r2, r1
 ce2:	a4 fe       	sbrs	r10, 4
 ce4:	10 c0       	rjmp	.+32     	; 0xd06 <vfprintf+0x356>
 ce6:	b6 01       	movw	r22, r12
 ce8:	80 e3       	ldi	r24, 0x30	; 48
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 cf0:	a2 fe       	sbrs	r10, 2
 cf2:	17 c0       	rjmp	.+46     	; 0xd22 <vfprintf+0x372>
 cf4:	a1 fc       	sbrc	r10, 1
 cf6:	03 c0       	rjmp	.+6      	; 0xcfe <vfprintf+0x34e>
 cf8:	88 e7       	ldi	r24, 0x78	; 120
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	02 c0       	rjmp	.+4      	; 0xd02 <vfprintf+0x352>
 cfe:	88 e5       	ldi	r24, 0x58	; 88
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	b6 01       	movw	r22, r12
 d04:	0c c0       	rjmp	.+24     	; 0xd1e <vfprintf+0x36e>
 d06:	8a 2d       	mov	r24, r10
 d08:	86 78       	andi	r24, 0x86	; 134
 d0a:	59 f0       	breq	.+22     	; 0xd22 <vfprintf+0x372>
 d0c:	a1 fe       	sbrs	r10, 1
 d0e:	02 c0       	rjmp	.+4      	; 0xd14 <vfprintf+0x364>
 d10:	8b e2       	ldi	r24, 0x2B	; 43
 d12:	01 c0       	rjmp	.+2      	; 0xd16 <vfprintf+0x366>
 d14:	80 e2       	ldi	r24, 0x20	; 32
 d16:	a7 fc       	sbrc	r10, 7
 d18:	8d e2       	ldi	r24, 0x2D	; 45
 d1a:	b6 01       	movw	r22, r12
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 d22:	89 14       	cp	r8, r9
 d24:	38 f4       	brcc	.+14     	; 0xd34 <vfprintf+0x384>
 d26:	b6 01       	movw	r22, r12
 d28:	80 e3       	ldi	r24, 0x30	; 48
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 d30:	9a 94       	dec	r9
 d32:	f7 cf       	rjmp	.-18     	; 0xd22 <vfprintf+0x372>
 d34:	8a 94       	dec	r8
 d36:	f3 01       	movw	r30, r6
 d38:	e8 0d       	add	r30, r8
 d3a:	f1 1d       	adc	r31, r1
 d3c:	80 81       	ld	r24, Z
 d3e:	b6 01       	movw	r22, r12
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 d46:	81 10       	cpse	r8, r1
 d48:	f5 cf       	rjmp	.-22     	; 0xd34 <vfprintf+0x384>
 d4a:	22 20       	and	r2, r2
 d4c:	09 f4       	brne	.+2      	; 0xd50 <vfprintf+0x3a0>
 d4e:	42 ce       	rjmp	.-892    	; 0x9d4 <vfprintf+0x24>
 d50:	b6 01       	movw	r22, r12
 d52:	80 e2       	ldi	r24, 0x20	; 32
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	0e 94 cf 06 	call	0xd9e	; 0xd9e <fputc>
 d5a:	2a 94       	dec	r2
 d5c:	f6 cf       	rjmp	.-20     	; 0xd4a <vfprintf+0x39a>
 d5e:	f6 01       	movw	r30, r12
 d60:	86 81       	ldd	r24, Z+6	; 0x06
 d62:	97 81       	ldd	r25, Z+7	; 0x07
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x3ba>
 d66:	8f ef       	ldi	r24, 0xFF	; 255
 d68:	9f ef       	ldi	r25, 0xFF	; 255
 d6a:	2b 96       	adiw	r28, 0x0b	; 11
 d6c:	e2 e1       	ldi	r30, 0x12	; 18
 d6e:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__epilogue_restores__>

00000d72 <strnlen_P>:
 d72:	fc 01       	movw	r30, r24
 d74:	05 90       	lpm	r0, Z+
 d76:	61 50       	subi	r22, 0x01	; 1
 d78:	70 40       	sbci	r23, 0x00	; 0
 d7a:	01 10       	cpse	r0, r1
 d7c:	d8 f7       	brcc	.-10     	; 0xd74 <strnlen_P+0x2>
 d7e:	80 95       	com	r24
 d80:	90 95       	com	r25
 d82:	8e 0f       	add	r24, r30
 d84:	9f 1f       	adc	r25, r31
 d86:	08 95       	ret

00000d88 <strnlen>:
 d88:	fc 01       	movw	r30, r24
 d8a:	61 50       	subi	r22, 0x01	; 1
 d8c:	70 40       	sbci	r23, 0x00	; 0
 d8e:	01 90       	ld	r0, Z+
 d90:	01 10       	cpse	r0, r1
 d92:	d8 f7       	brcc	.-10     	; 0xd8a <strnlen+0x2>
 d94:	80 95       	com	r24
 d96:	90 95       	com	r25
 d98:	8e 0f       	add	r24, r30
 d9a:	9f 1f       	adc	r25, r31
 d9c:	08 95       	ret

00000d9e <fputc>:
 d9e:	0f 93       	push	r16
 da0:	1f 93       	push	r17
 da2:	cf 93       	push	r28
 da4:	df 93       	push	r29
 da6:	fb 01       	movw	r30, r22
 da8:	23 81       	ldd	r18, Z+3	; 0x03
 daa:	21 fd       	sbrc	r18, 1
 dac:	03 c0       	rjmp	.+6      	; 0xdb4 <fputc+0x16>
 dae:	8f ef       	ldi	r24, 0xFF	; 255
 db0:	9f ef       	ldi	r25, 0xFF	; 255
 db2:	2c c0       	rjmp	.+88     	; 0xe0c <fputc+0x6e>
 db4:	22 ff       	sbrs	r18, 2
 db6:	16 c0       	rjmp	.+44     	; 0xde4 <fputc+0x46>
 db8:	46 81       	ldd	r20, Z+6	; 0x06
 dba:	57 81       	ldd	r21, Z+7	; 0x07
 dbc:	24 81       	ldd	r18, Z+4	; 0x04
 dbe:	35 81       	ldd	r19, Z+5	; 0x05
 dc0:	42 17       	cp	r20, r18
 dc2:	53 07       	cpc	r21, r19
 dc4:	44 f4       	brge	.+16     	; 0xdd6 <fputc+0x38>
 dc6:	a0 81       	ld	r26, Z
 dc8:	b1 81       	ldd	r27, Z+1	; 0x01
 dca:	9d 01       	movw	r18, r26
 dcc:	2f 5f       	subi	r18, 0xFF	; 255
 dce:	3f 4f       	sbci	r19, 0xFF	; 255
 dd0:	31 83       	std	Z+1, r19	; 0x01
 dd2:	20 83       	st	Z, r18
 dd4:	8c 93       	st	X, r24
 dd6:	26 81       	ldd	r18, Z+6	; 0x06
 dd8:	37 81       	ldd	r19, Z+7	; 0x07
 dda:	2f 5f       	subi	r18, 0xFF	; 255
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	37 83       	std	Z+7, r19	; 0x07
 de0:	26 83       	std	Z+6, r18	; 0x06
 de2:	14 c0       	rjmp	.+40     	; 0xe0c <fputc+0x6e>
 de4:	8b 01       	movw	r16, r22
 de6:	ec 01       	movw	r28, r24
 de8:	fb 01       	movw	r30, r22
 dea:	00 84       	ldd	r0, Z+8	; 0x08
 dec:	f1 85       	ldd	r31, Z+9	; 0x09
 dee:	e0 2d       	mov	r30, r0
 df0:	09 95       	icall
 df2:	89 2b       	or	r24, r25
 df4:	e1 f6       	brne	.-72     	; 0xdae <fputc+0x10>
 df6:	d8 01       	movw	r26, r16
 df8:	16 96       	adiw	r26, 0x06	; 6
 dfa:	8d 91       	ld	r24, X+
 dfc:	9c 91       	ld	r25, X
 dfe:	17 97       	sbiw	r26, 0x07	; 7
 e00:	01 96       	adiw	r24, 0x01	; 1
 e02:	17 96       	adiw	r26, 0x07	; 7
 e04:	9c 93       	st	X, r25
 e06:	8e 93       	st	-X, r24
 e08:	16 97       	sbiw	r26, 0x06	; 6
 e0a:	ce 01       	movw	r24, r28
 e0c:	df 91       	pop	r29
 e0e:	cf 91       	pop	r28
 e10:	1f 91       	pop	r17
 e12:	0f 91       	pop	r16
 e14:	08 95       	ret

00000e16 <__ultoa_invert>:
 e16:	fa 01       	movw	r30, r20
 e18:	aa 27       	eor	r26, r26
 e1a:	28 30       	cpi	r18, 0x08	; 8
 e1c:	51 f1       	breq	.+84     	; 0xe72 <__ultoa_invert+0x5c>
 e1e:	20 31       	cpi	r18, 0x10	; 16
 e20:	81 f1       	breq	.+96     	; 0xe82 <__ultoa_invert+0x6c>
 e22:	e8 94       	clt
 e24:	6f 93       	push	r22
 e26:	6e 7f       	andi	r22, 0xFE	; 254
 e28:	6e 5f       	subi	r22, 0xFE	; 254
 e2a:	7f 4f       	sbci	r23, 0xFF	; 255
 e2c:	8f 4f       	sbci	r24, 0xFF	; 255
 e2e:	9f 4f       	sbci	r25, 0xFF	; 255
 e30:	af 4f       	sbci	r26, 0xFF	; 255
 e32:	b1 e0       	ldi	r27, 0x01	; 1
 e34:	3e d0       	rcall	.+124    	; 0xeb2 <__ultoa_invert+0x9c>
 e36:	b4 e0       	ldi	r27, 0x04	; 4
 e38:	3c d0       	rcall	.+120    	; 0xeb2 <__ultoa_invert+0x9c>
 e3a:	67 0f       	add	r22, r23
 e3c:	78 1f       	adc	r23, r24
 e3e:	89 1f       	adc	r24, r25
 e40:	9a 1f       	adc	r25, r26
 e42:	a1 1d       	adc	r26, r1
 e44:	68 0f       	add	r22, r24
 e46:	79 1f       	adc	r23, r25
 e48:	8a 1f       	adc	r24, r26
 e4a:	91 1d       	adc	r25, r1
 e4c:	a1 1d       	adc	r26, r1
 e4e:	6a 0f       	add	r22, r26
 e50:	71 1d       	adc	r23, r1
 e52:	81 1d       	adc	r24, r1
 e54:	91 1d       	adc	r25, r1
 e56:	a1 1d       	adc	r26, r1
 e58:	20 d0       	rcall	.+64     	; 0xe9a <__ultoa_invert+0x84>
 e5a:	09 f4       	brne	.+2      	; 0xe5e <__ultoa_invert+0x48>
 e5c:	68 94       	set
 e5e:	3f 91       	pop	r19
 e60:	2a e0       	ldi	r18, 0x0A	; 10
 e62:	26 9f       	mul	r18, r22
 e64:	11 24       	eor	r1, r1
 e66:	30 19       	sub	r19, r0
 e68:	30 5d       	subi	r19, 0xD0	; 208
 e6a:	31 93       	st	Z+, r19
 e6c:	de f6       	brtc	.-74     	; 0xe24 <__ultoa_invert+0xe>
 e6e:	cf 01       	movw	r24, r30
 e70:	08 95       	ret
 e72:	46 2f       	mov	r20, r22
 e74:	47 70       	andi	r20, 0x07	; 7
 e76:	40 5d       	subi	r20, 0xD0	; 208
 e78:	41 93       	st	Z+, r20
 e7a:	b3 e0       	ldi	r27, 0x03	; 3
 e7c:	0f d0       	rcall	.+30     	; 0xe9c <__ultoa_invert+0x86>
 e7e:	c9 f7       	brne	.-14     	; 0xe72 <__ultoa_invert+0x5c>
 e80:	f6 cf       	rjmp	.-20     	; 0xe6e <__ultoa_invert+0x58>
 e82:	46 2f       	mov	r20, r22
 e84:	4f 70       	andi	r20, 0x0F	; 15
 e86:	40 5d       	subi	r20, 0xD0	; 208
 e88:	4a 33       	cpi	r20, 0x3A	; 58
 e8a:	18 f0       	brcs	.+6      	; 0xe92 <__ultoa_invert+0x7c>
 e8c:	49 5d       	subi	r20, 0xD9	; 217
 e8e:	31 fd       	sbrc	r19, 1
 e90:	40 52       	subi	r20, 0x20	; 32
 e92:	41 93       	st	Z+, r20
 e94:	02 d0       	rcall	.+4      	; 0xe9a <__ultoa_invert+0x84>
 e96:	a9 f7       	brne	.-22     	; 0xe82 <__ultoa_invert+0x6c>
 e98:	ea cf       	rjmp	.-44     	; 0xe6e <__ultoa_invert+0x58>
 e9a:	b4 e0       	ldi	r27, 0x04	; 4
 e9c:	a6 95       	lsr	r26
 e9e:	97 95       	ror	r25
 ea0:	87 95       	ror	r24
 ea2:	77 95       	ror	r23
 ea4:	67 95       	ror	r22
 ea6:	ba 95       	dec	r27
 ea8:	c9 f7       	brne	.-14     	; 0xe9c <__ultoa_invert+0x86>
 eaa:	00 97       	sbiw	r24, 0x00	; 0
 eac:	61 05       	cpc	r22, r1
 eae:	71 05       	cpc	r23, r1
 eb0:	08 95       	ret
 eb2:	9b 01       	movw	r18, r22
 eb4:	ac 01       	movw	r20, r24
 eb6:	0a 2e       	mov	r0, r26
 eb8:	06 94       	lsr	r0
 eba:	57 95       	ror	r21
 ebc:	47 95       	ror	r20
 ebe:	37 95       	ror	r19
 ec0:	27 95       	ror	r18
 ec2:	ba 95       	dec	r27
 ec4:	c9 f7       	brne	.-14     	; 0xeb8 <__ultoa_invert+0xa2>
 ec6:	62 0f       	add	r22, r18
 ec8:	73 1f       	adc	r23, r19
 eca:	84 1f       	adc	r24, r20
 ecc:	95 1f       	adc	r25, r21
 ece:	a0 1d       	adc	r26, r0
 ed0:	08 95       	ret

00000ed2 <__prologue_saves__>:
 ed2:	2f 92       	push	r2
 ed4:	3f 92       	push	r3
 ed6:	4f 92       	push	r4
 ed8:	5f 92       	push	r5
 eda:	6f 92       	push	r6
 edc:	7f 92       	push	r7
 ede:	8f 92       	push	r8
 ee0:	9f 92       	push	r9
 ee2:	af 92       	push	r10
 ee4:	bf 92       	push	r11
 ee6:	cf 92       	push	r12
 ee8:	df 92       	push	r13
 eea:	ef 92       	push	r14
 eec:	ff 92       	push	r15
 eee:	0f 93       	push	r16
 ef0:	1f 93       	push	r17
 ef2:	cf 93       	push	r28
 ef4:	df 93       	push	r29
 ef6:	cd b7       	in	r28, 0x3d	; 61
 ef8:	de b7       	in	r29, 0x3e	; 62
 efa:	ca 1b       	sub	r28, r26
 efc:	db 0b       	sbc	r29, r27
 efe:	0f b6       	in	r0, 0x3f	; 63
 f00:	f8 94       	cli
 f02:	de bf       	out	0x3e, r29	; 62
 f04:	0f be       	out	0x3f, r0	; 63
 f06:	cd bf       	out	0x3d, r28	; 61
 f08:	09 94       	ijmp

00000f0a <__epilogue_restores__>:
 f0a:	2a 88       	ldd	r2, Y+18	; 0x12
 f0c:	39 88       	ldd	r3, Y+17	; 0x11
 f0e:	48 88       	ldd	r4, Y+16	; 0x10
 f10:	5f 84       	ldd	r5, Y+15	; 0x0f
 f12:	6e 84       	ldd	r6, Y+14	; 0x0e
 f14:	7d 84       	ldd	r7, Y+13	; 0x0d
 f16:	8c 84       	ldd	r8, Y+12	; 0x0c
 f18:	9b 84       	ldd	r9, Y+11	; 0x0b
 f1a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f1c:	b9 84       	ldd	r11, Y+9	; 0x09
 f1e:	c8 84       	ldd	r12, Y+8	; 0x08
 f20:	df 80       	ldd	r13, Y+7	; 0x07
 f22:	ee 80       	ldd	r14, Y+6	; 0x06
 f24:	fd 80       	ldd	r15, Y+5	; 0x05
 f26:	0c 81       	ldd	r16, Y+4	; 0x04
 f28:	1b 81       	ldd	r17, Y+3	; 0x03
 f2a:	aa 81       	ldd	r26, Y+2	; 0x02
 f2c:	b9 81       	ldd	r27, Y+1	; 0x01
 f2e:	ce 0f       	add	r28, r30
 f30:	d1 1d       	adc	r29, r1
 f32:	0f b6       	in	r0, 0x3f	; 63
 f34:	f8 94       	cli
 f36:	de bf       	out	0x3e, r29	; 62
 f38:	0f be       	out	0x3f, r0	; 63
 f3a:	cd bf       	out	0x3d, r28	; 61
 f3c:	ed 01       	movw	r28, r26
 f3e:	08 95       	ret

00000f40 <_exit>:
 f40:	f8 94       	cli

00000f42 <__stop_program>:
 f42:	ff cf       	rjmp	.-2      	; 0xf42 <__stop_program>
