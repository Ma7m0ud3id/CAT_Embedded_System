
task5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000daf  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a9  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ed  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a1  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIR_PIN>:
	
	*PORTx=0xff;
	
}
void Set_PIN(uint8_t *PORTx,uint8_t pin){
	*PORTx|=(1<<pin);
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	61 f4       	brne	.+24     	; 0x88 <DIR_PIN+0x1c>
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <DIR_PIN+0xe>
  76:	22 0f       	add	r18, r18
  78:	33 1f       	adc	r19, r19
  7a:	6a 95       	dec	r22
  7c:	e2 f7       	brpl	.-8      	; 0x76 <DIR_PIN+0xa>
  7e:	fc 01       	movw	r30, r24
  80:	30 81       	ld	r19, Z
  82:	23 2b       	or	r18, r19
  84:	20 83       	st	Z, r18
  86:	08 95       	ret
  88:	41 11       	cpse	r20, r1
  8a:	0c c0       	rjmp	.+24     	; 0xa4 <DIR_PIN+0x38>
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <DIR_PIN+0x2a>
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	6a 95       	dec	r22
  98:	e2 f7       	brpl	.-8      	; 0x92 <DIR_PIN+0x26>
  9a:	20 95       	com	r18
  9c:	fc 01       	movw	r30, r24
  9e:	30 81       	ld	r19, Z
  a0:	23 23       	and	r18, r19
  a2:	20 83       	st	Z, r18
  a4:	08 95       	ret

000000a6 <READ_PIN>:
  a6:	fc 01       	movw	r30, r24
  a8:	80 81       	ld	r24, Z
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <READ_PIN+0xc>
  ae:	95 95       	asr	r25
  b0:	87 95       	ror	r24
  b2:	6a 95       	dec	r22
  b4:	e2 f7       	brpl	.-8      	; 0xae <READ_PIN+0x8>
  b6:	81 70       	andi	r24, 0x01	; 1
  b8:	08 95       	ret

000000ba <Toggel_PIN>:
	
}


void Toggel_PIN(uint8_t *PORTx,uint8_t pin){
	*PORTx^=(1<<pin);
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <Toggel_PIN+0xa>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <Toggel_PIN+0x6>
  c8:	fc 01       	movw	r30, r24
  ca:	30 81       	ld	r19, Z
  cc:	23 27       	eor	r18, r19
  ce:	20 83       	st	Z, r18
  d0:	08 95       	ret

000000d2 <LED_INIT>:
}
void LED_SET (uint8_t *PORTx,uint8_t PINx){
	Set_PIN(PORTx,PINx);
}
void LED_RESET (uint8_t *PORTx,uint8_t PINx){
	Reset_PIN(PORTx,PINx);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	0e 94 36 00 	call	0x6c	; 0x6c <DIR_PIN>
  d8:	08 95       	ret

000000da <LED_Toggel>:
	
}
void LED_Toggel (uint8_t *PORTx,uint8_t PINx){
	Toggel_PIN(PORTx,PINx);
  da:	0e 94 5d 00 	call	0xba	; 0xba <Toggel_PIN>
  de:	08 95       	ret

000000e0 <main>:
#include <util/delay.h>


int main(void)
{
    LED_INIT(DDRA,PIN0);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	8a e3       	ldi	r24, 0x3A	; 58
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 69 00 	call	0xd2	; 0xd2 <LED_INIT>
	LED_INIT(DDRA,PIN1);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	8a e3       	ldi	r24, 0x3A	; 58
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 69 00 	call	0xd2	; 0xd2 <LED_INIT>
	LED_INIT(DDRA,PIN2);
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	8a e3       	ldi	r24, 0x3A	; 58
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 69 00 	call	0xd2	; 0xd2 <LED_INIT>
	SWITCH_INIT(DDRA,PIN3);
  fe:	63 e0       	ldi	r22, 0x03	; 3
 100:	8a e3       	ldi	r24, 0x3A	; 58
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 cb 00 	call	0x196	; 0x196 <SWITCH_INIT>
	SWITCH_INIT(DDRA,PIN4);
 108:	64 e0       	ldi	r22, 0x04	; 4
 10a:	8a e3       	ldi	r24, 0x3A	; 58
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 cb 00 	call	0x196	; 0x196 <SWITCH_INIT>
	LED_Toggel(PORTA,PIN0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8b e3       	ldi	r24, 0x3B	; 59
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 6d 00 	call	0xda	; 0xda <LED_Toggel>
	LED_Toggel(PORTA,PIN1);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	8b e3       	ldi	r24, 0x3B	; 59
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 6d 00 	call	0xda	; 0xda <LED_Toggel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f e7       	ldi	r18, 0x7F	; 127
 128:	8a e1       	ldi	r24, 0x1A	; 26
 12a:	96 e0       	ldi	r25, 0x06	; 6
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x4c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x56>
 136:	00 00       	nop
	_delay_ms(2000);
	LED_Toggel(PORTA,PIN0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	8b e3       	ldi	r24, 0x3B	; 59
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 6d 00 	call	0xda	; 0xda <LED_Toggel>
	LED_Toggel(PORTA,PIN1);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	8b e3       	ldi	r24, 0x3B	; 59
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 6d 00 	call	0xda	; 0xda <LED_Toggel>
    while (1) 
    {
		LED_Toggel(PORTA,PIN2);
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	8b e3       	ldi	r24, 0x3B	; 59
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 6d 00 	call	0xda	; 0xda <LED_Toggel>
 156:	8f e4       	ldi	r24, 0x4F	; 79
 158:	93 ec       	ldi	r25, 0xC3	; 195
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x7a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x80>
 160:	00 00       	nop
		_delay_ms(200);
		if (SWITCH_READ(PINA,PIN3))
 162:	63 e0       	ldi	r22, 0x03	; 3
 164:	89 e3       	ldi	r24, 0x39	; 57
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 cf 00 	call	0x19e	; 0x19e <SWITCH_READ>
 16c:	88 23       	and	r24, r24
 16e:	31 f0       	breq	.+12     	; 0x17c <main+0x9c>
		{
			LED_Toggel(PORTA,PIN0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	8b e3       	ldi	r24, 0x3B	; 59
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 6d 00 	call	0xda	; 0xda <LED_Toggel>
 17a:	e8 cf       	rjmp	.-48     	; 0x14c <main+0x6c>
			
		}else if(SWITCH_READ(PINA,PIN4)){
 17c:	64 e0       	ldi	r22, 0x04	; 4
 17e:	89 e3       	ldi	r24, 0x39	; 57
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 cf 00 	call	0x19e	; 0x19e <SWITCH_READ>
 186:	88 23       	and	r24, r24
 188:	09 f3       	breq	.-62     	; 0x14c <main+0x6c>
			
			LED_Toggel(PORTA,PIN1);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	8b e3       	ldi	r24, 0x3B	; 59
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 6d 00 	call	0xda	; 0xda <LED_Toggel>
 194:	db cf       	rjmp	.-74     	; 0x14c <main+0x6c>

00000196 <SWITCH_INIT>:
 *  Author: mahmo
 */ 
#include "SWITCH.h"

void SWITCH_INIT (uint8_t *DDRx,uint8_t PINx){
	DIR_PIN(DDRx,PINx,0);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	0e 94 36 00 	call	0x6c	; 0x6c <DIR_PIN>
 19c:	08 95       	ret

0000019e <SWITCH_READ>:
}


uint8_t SWITCH_READ (uint8_t *PINx,uint8_t pinx){
	return READ_PIN(PINx,pinx);
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <READ_PIN>
 1a2:	08 95       	ret

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
